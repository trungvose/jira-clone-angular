{
    "pipes": [],
    "interfaces": [
        {
            "name": "AuthState",
            "id": "interface-AuthState-43e2d14b2f335cce977c4e72c7e6a606",
            "file": "src/app/project/auth/auth.store.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { JUser } from '@trungk18/interface/user';\nimport { Store, StoreConfig } from '@datorama/akita';\n\nexport interface AuthState extends JUser {\n  token: string;\n}\n\nexport function createInitialAuthState(): AuthState {\n  return { token: `${new Date().getTime()}` } as AuthState;\n}\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({\n  name: 'auth'\n})\nexport class AuthStore extends Store<AuthState> {\n  constructor() {\n    super(createInitialAuthState());\n  }\n}\n",
            "properties": [
                {
                    "name": "token",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "JUser"
        },
        {
            "name": "ButtonProps",
            "id": "interface-ButtonProps-80336ca223ec2db03b581e9533ee38c2",
            "file": "src/app/jira-control/button/button.stories.ts",
            "type": "interface",
            "sourceCode": "import { Meta, Story } from '@storybook/angular';\nimport { ButtonComponent } from './button.component';\n\nexport default {\n  title: 'Components/Button',\n  component: ButtonComponent\n} as Meta;\n\ninterface ButtonProps extends ButtonComponent {\n  label: string;\n}\n\nconst Template: Story<ButtonComponent> = ({ label, className }: Partial<ButtonProps>) => ({\n  component: ButtonComponent,\n  moduleMetadata: {\n    declarations: [ButtonComponent], // Removed if no template\n    imports: []\n  },\n  template: `<j-button className='${className}'>${label}</j-button>`\n});\n\nexport const Primary: Story<ButtonProps> = Template.bind({});\nPrimary.args = {\n  className: 'btn-primary',\n  label: 'Primary'\n};\n\nexport const Secondary: Story<ButtonProps> = Template.bind({});\nSecondary.args = {\n  className: 'btn-secondary',\n  label: 'Secondary'\n};\n\nexport const Empty: Story<ButtonProps> = Template.bind({});\nEmpty.args = {\n  icon: \"times\",\n  className: 'btn-empty',\n  label: 'Cancel'\n};\n",
            "properties": [
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "ButtonComponent"
        },
        {
            "name": "EnvironmentModel",
            "id": "interface-EnvironmentModel-c0087a9667cca7c104b85aa4bebc9698",
            "file": "src/environments/environment-model.ts",
            "type": "interface",
            "sourceCode": "export interface EnvironmentModel {\n  production: boolean;\n  apiUrl: string;\n}\n",
            "properties": [
                {
                    "name": "apiUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "production",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "FilterState",
            "id": "interface-FilterState-61b8d70b995b6ead96560e5ae3bd42b2",
            "file": "src/app/project/state/filter/filter.store.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Store, StoreConfig } from '@datorama/akita';\n\nexport interface FilterState {\n  searchTerm: string;\n  userIds: string[];\n  onlyMyIssue: boolean;\n  ignoreResolved: boolean;\n}\n\nexport function createInitialFilterState(): FilterState {\n  return {\n    searchTerm: '',\n    userIds: [],\n    onlyMyIssue: false,\n    ignoreResolved: false\n  };\n}\n\n@Injectable({\n  providedIn: 'root'\n})\n@StoreConfig({\n  name: 'filter'\n})\nexport class FilterStore extends Store<FilterState> {\n  constructor() {\n    super(createInitialFilterState());\n  }\n}\n",
            "properties": [
                {
                    "name": "ignoreResolved",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "onlyMyIssue",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "searchTerm",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "userIds",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "JIssue",
            "id": "interface-JIssue-18691b20c62af7cf438eda67fbb39ac5",
            "file": "src/app/interface/issue.ts",
            "type": "interface",
            "sourceCode": "import { JComment } from './comment';\n\nexport enum IssueType {\n  STORY = 'Story',\n  TASK = 'Task',\n  BUG = 'Bug'\n}\n\nexport enum IssueStatus {\n  BACKLOG = 'Backlog',\n  SELECTED = 'Selected',\n  IN_PROGRESS = 'InProgress',\n  DONE = 'Done'\n}\n\nexport const IssueStatusDisplay = {\n  [IssueStatus.BACKLOG]: 'Backlog',\n  [IssueStatus.SELECTED]: 'Selected for Development',\n  [IssueStatus.IN_PROGRESS]: 'In progress',\n  [IssueStatus.DONE]: 'Done'\n};\n\nexport enum IssuePriority {\n  LOWEST = 'Lowest',\n  LOW = 'Low',\n  MEDIUM = 'Medium',\n  HIGH = 'High',\n  HIGHEST = 'Highest'\n}\n\nexport const IssuePriorityColors = {\n  [IssuePriority.HIGHEST]: '#CD1317',\n  [IssuePriority.HIGH]: '#E9494A',\n  [IssuePriority.MEDIUM]: '#E97F33',\n  [IssuePriority.LOW]: '#2D8738',\n  [IssuePriority.LOWEST]: '#57A55A'\n};\nexport interface JIssue {\n  id: string;\n  title: string;\n  type: IssueType;\n  status: IssueStatus;\n  priority: IssuePriority;\n  listPosition: number;\n  description: string;\n  estimate: number;\n  timeSpent: number;\n  timeRemaining: number;\n  createdAt: string;\n  updatedAt: string;\n  reporterId: string;\n  userIds: string[];\n  comments: JComment[];\n  projectId: string;\n}\n",
            "properties": [
                {
                    "name": "comments",
                    "type": "JComment[]",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "createdAt",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "estimate",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "listPosition",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "priority",
                    "type": "IssuePriority",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "projectId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "reporterId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "status",
                    "type": "IssueStatus",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "timeRemaining",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "timeSpent",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "type",
                    "type": "IssueType",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "updatedAt",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "userIds",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 52
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "JProject",
            "id": "interface-JProject-1cf30876bbb3a088d4b5b6da1244de47",
            "file": "src/app/interface/project.ts",
            "type": "interface",
            "sourceCode": "import { JIssue } from './issue';\nimport { JUser } from './user';\n\nexport interface JProject {\n  id: string;\n  name: string;\n  url: string;\n  description: string;\n  category: ProjectCategory;\n  createdAt: string;\n  updateAt: string;\n  issues: JIssue[];\n  users: JUser[];\n}\n\nexport enum ProjectCategory {\n  SOFTWARE = 'Software',\n  MARKETING = 'Marketing',\n  BUSINESS = 'Business'\n}\n",
            "properties": [
                {
                    "name": "category",
                    "type": "ProjectCategory",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "createdAt",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "issues",
                    "type": "JIssue[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "updateAt",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "url",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "users",
                    "type": "JUser[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "JUser",
            "id": "interface-JUser-2207c79e376d3d49816e198842f0dcc8",
            "file": "src/app/interface/user.ts",
            "type": "interface",
            "sourceCode": "export interface JUser {\n  id: string;\n  name: string;\n  email: string;\n  avatarUrl: string;\n  createdAt: string;\n  updatedAt: string;\n  issueIds: string[];\n}\n",
            "properties": [
                {
                    "name": "avatarUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "createdAt",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "issueIds",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "updatedAt",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ProjectState",
            "id": "interface-ProjectState-d58ea2017d2feb69d516eef24e846b30",
            "file": "src/app/project/state/project/project.store.ts",
            "type": "interface",
            "sourceCode": "import { JProject } from '@trungk18/interface/project';\nimport { Store, StoreConfig } from '@datorama/akita';\nimport { Injectable } from '@angular/core';\n\nexport interface ProjectState extends JProject {}\n\nfunction createInitialState(): ProjectState {\n  return {\n    issues: [],\n    users: []\n  } as ProjectState;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\n@StoreConfig({\n  name: 'project'\n})\nexport class ProjectStore extends Store<ProjectState> {\n  constructor() {\n    super(createInitialState());\n  }\n}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "JProject"
        }
    ],
    "injectables": [
        {
            "name": "AuthQuery",
            "id": "injectable-AuthQuery-45e7b85ed585785ad8c46da1cb311e80",
            "file": "src/app/project/auth/auth.query.ts",
            "properties": [
                {
                    "name": "user$",
                    "defaultValue": "this.select()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "userId$",
                    "defaultValue": "this.select('id')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { AuthStore, AuthState } from './auth.store';\nimport { Query } from '@datorama/akita';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthQuery extends Query<AuthState> {\n  constructor(protected store: AuthStore) {\n    super(store);\n  }\n\n  user$ = this.select();\n  userId$ = this.select('id');\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "AuthStore"
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "AuthStore",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "Query",
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-a97ceeda1662316451e042e102b84ebe",
            "file": "src/app/project/auth/auth.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "login",
                    "args": [
                        {
                            "type": "LoginPayload"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "type": "LoginPayload",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { JUser } from '@trungk18/interface/user';\nimport { of } from 'rxjs';\nimport { catchError, finalize, map } from 'rxjs/operators';\nimport { AuthStore } from './auth.store';\nimport { environment } from 'src/environments/environment';\nimport { LoginPayload } from '@trungk18/project/auth/loginPayload';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthService {\n  private baseUrl: string;\n  constructor(private _http: HttpClient, private _store: AuthStore) {\n    this.baseUrl = environment.apiUrl;\n  }\n\n  login({ email = '', password = '' }: LoginPayload) {\n    this._store.setLoading(true);\n    this._http\n      .get<JUser>(`${this.baseUrl}/auth.json`)\n      .pipe(\n        map((user) => {\n          this._store.update((state) => ({\n            ...state,\n            ...user\n          }));\n        }),\n        finalize(() => {\n          this._store.setLoading(false);\n        }),\n        catchError((err) => {\n          this._store.setError(err);\n          return of(err);\n        })\n      )\n      .subscribe();\n  }\n}\n\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_http",
                        "type": "HttpClient"
                    },
                    {
                        "name": "_store",
                        "type": "AuthStore"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "_http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_store",
                        "type": "AuthStore",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AuthStore",
            "id": "injectable-AuthStore-43e2d14b2f335cce977c4e72c7e6a606",
            "file": "src/app/project/auth/auth.store.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { JUser } from '@trungk18/interface/user';\nimport { Store, StoreConfig } from '@datorama/akita';\n\nexport interface AuthState extends JUser {\n  token: string;\n}\n\nexport function createInitialAuthState(): AuthState {\n  return { token: `${new Date().getTime()}` } as AuthState;\n}\n\n@Injectable({ providedIn: 'root' })\n@StoreConfig({\n  name: 'auth'\n})\nexport class AuthStore extends Store<AuthState> {\n  constructor() {\n    super(createInitialAuthState());\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 17
            },
            "extends": "Store",
            "type": "injectable"
        },
        {
            "name": "FilterQuery",
            "id": "injectable-FilterQuery-8121d38b9231121af2f70b638b15850b",
            "file": "src/app/project/state/filter/filter.query.ts",
            "properties": [
                {
                    "name": "all$",
                    "defaultValue": "this.select()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "any$",
                    "defaultValue": "this.select(({ searchTerm, userIds, onlyMyIssue, ignoreResolved }) => {\n    return !!searchTerm || !!userIds?.length || onlyMyIssue || ignoreResolved;\n  })",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "ignoreResolve$",
                    "defaultValue": "this.select('ignoreResolved')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "onlyMyIssue$",
                    "defaultValue": "this.select('onlyMyIssue')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "userIds$",
                    "defaultValue": "this.select('userIds')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Query } from '@datorama/akita';\nimport { FilterStore, FilterState } from './filter.store';\n\n@Injectable({ providedIn: 'root' })\nexport class FilterQuery extends Query<FilterState> {\n  constructor(protected store: FilterStore) {\n    super(store);\n  }\n\n  any$ = this.select(({ searchTerm, userIds, onlyMyIssue, ignoreResolved }) => {\n    return !!searchTerm || !!userIds?.length || onlyMyIssue || ignoreResolved;\n  });\n  all$ = this.select();\n  userIds$ = this.select('userIds');\n  onlyMyIssue$ = this.select('onlyMyIssue');\n  ignoreResolve$ = this.select('ignoreResolved');\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "FilterStore"
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "FilterStore",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "Query",
            "type": "injectable"
        },
        {
            "name": "FilterService",
            "id": "injectable-FilterService-e29699842ad56c064296183688615aca",
            "file": "src/app/project/state/filter/filter.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "resetAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49
                },
                {
                    "name": "toggleIgnoreResolve",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39
                },
                {
                    "name": "toggleOnlyMyIssue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "toggleUserId",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateSearchTerm",
                    "args": [
                        {
                            "name": "searchTerm",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "jsdoctags": [
                        {
                            "name": "searchTerm",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { FilterStore, createInitialFilterState } from './filter.store';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FilterService {\n  constructor(private store: FilterStore) {}\n\n  updateSearchTerm(searchTerm: string) {\n    this.store.update({\n      searchTerm\n    });\n  }\n\n  toggleUserId(userId: string) {\n    this.store.update((state) => {\n      const hasUser = state.userIds.includes(userId);\n      const userIds = hasUser\n        ? state.userIds.filter((x) => x !== userId)\n        : [...state.userIds, userId];\n      return {\n        ...state,\n        userIds\n      };\n    });\n  }\n\n  toggleOnlyMyIssue() {\n    this.store.update((state) => {\n      const onlyMyIssue = !state.onlyMyIssue;\n      return {\n        ...state,\n        onlyMyIssue\n      };\n    });\n  }\n\n  toggleIgnoreResolve() {\n    this.store.update((state) => {\n      const ignoreResolved = !state.ignoreResolved;\n      return {\n        ...state,\n        ignoreResolved\n      };\n    });\n  }\n\n  resetAll() {\n    this.store.update((state) => ({\n      ...state,\n      ...createInitialFilterState()\n    }));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "FilterStore"
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "FilterStore",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "FilterStore",
            "id": "injectable-FilterStore-61b8d70b995b6ead96560e5ae3bd42b2",
            "file": "src/app/project/state/filter/filter.store.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Store, StoreConfig } from '@datorama/akita';\n\nexport interface FilterState {\n  searchTerm: string;\n  userIds: string[];\n  onlyMyIssue: boolean;\n  ignoreResolved: boolean;\n}\n\nexport function createInitialFilterState(): FilterState {\n  return {\n    searchTerm: '',\n    userIds: [],\n    onlyMyIssue: false,\n    ignoreResolved: false\n  };\n}\n\n@Injectable({\n  providedIn: 'root'\n})\n@StoreConfig({\n  name: 'filter'\n})\nexport class FilterStore extends Store<FilterState> {\n  constructor() {\n    super(createInitialFilterState());\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 26
            },
            "extends": "Store",
            "type": "injectable"
        },
        {
            "name": "GoogleAnalyticsService",
            "id": "injectable-GoogleAnalyticsService-9088c886dc4afa5810bfb1ecfcb12add",
            "file": "src/app/core/services/google-analytics.service.ts",
            "properties": [
                {
                    "name": "gtag",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "sendEvent",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "sendPageView",
                    "args": [
                        {
                            "name": "url",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\ndeclare var gtag: any;\nconst GOOGLE_ANALYTICS_ID = 'UA-80363801-4';\n@Injectable({\n  providedIn: 'root'\n})\nexport class GoogleAnalyticsService {\n  gtag: any;\n  constructor() {\n    if (typeof gtag !== 'undefined') {\n      this.gtag = gtag;\n    }\n  }\n\n  public sendEvent = (\n    eventName: string,\n    eventCategory: string,\n    eventLabel: string = null,\n    eventValue: number = null\n  ) => {\n    if (!this.gtag) {\n      return;\n    }\n    this.gtag('event', eventName, {\n      event_category: eventCategory,\n      event_label: eventLabel,\n      value: eventValue\n    });\n  }\n\n  public sendPageView(url: string) {\n    if (!this.gtag) {\n      return;\n    }\n    this.gtag('config', GOOGLE_ANALYTICS_ID, { page_path: url });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "type": "injectable"
        },
        {
            "name": "ProjectQuery",
            "id": "injectable-ProjectQuery-5043c96ae676ad526dce8352ec24bc70",
            "file": "src/app/project/state/project/project.query.ts",
            "properties": [
                {
                    "name": "all$",
                    "defaultValue": "this.select()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "isLoading$",
                    "defaultValue": "this.selectLoading()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "issueByStatusSorted$",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "issues$",
                    "defaultValue": "this.select('issues')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "lastIssuePosition",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "users$",
                    "defaultValue": "this.select('users')",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methods": [
                {
                    "name": "issueById$",
                    "args": [
                        {
                            "name": "issueId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "issueId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { ProjectState, ProjectStore } from './project.store';\nimport { Injectable } from '@angular/core';\nimport { Query } from '@datorama/akita';\nimport { IssueStatus, JIssue } from '@trungk18/interface/issue';\nimport { map, delay } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProjectQuery extends Query<ProjectState> {\n  constructor(protected store: ProjectStore) {\n    super(store);\n  }\n  isLoading$ = this.selectLoading();\n  all$ = this.select();\n  issues$ = this.select('issues');\n  users$ = this.select('users');\n\n  lastIssuePosition = (status: IssueStatus): number => {\n    const raw = this.store.getValue();\n    const issuesByStatus = raw.issues.filter(x => x.status === status);\n    return issuesByStatus.length;\n  }\n\n  issueByStatusSorted$ = (status: IssueStatus): Observable<JIssue[]> => {\n    return this.issues$.pipe(\n      map((issues) => {\n        return issues\n          .filter((x) => x.status === status)\n          .sort((a, b) => a.listPosition - b.listPosition);\n      })\n    );\n  }\n\n  issueById$(issueId: string){\n    return this.issues$.pipe(\n      delay(500),\n      map((issues) => {\n        return issues.find(x => x.id === issueId);\n      })\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "ProjectStore"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "ProjectStore",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "Query",
            "type": "injectable"
        },
        {
            "name": "ProjectService",
            "id": "injectable-ProjectService-1a8ef3c3bb947d62d7043d9a2f1fc068",
            "file": "src/app/project/state/project/project.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methods": [
                {
                    "name": "deleteIssue",
                    "args": [
                        {
                            "name": "issueId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "jsdoctags": [
                        {
                            "name": "issueId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProject",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                },
                {
                    "name": "setLoading",
                    "args": [
                        {
                            "name": "isLoading",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "isLoading",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateIssue",
                    "args": [
                        {
                            "name": "issue",
                            "type": "JIssue"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "jsdoctags": [
                        {
                            "name": "issue",
                            "type": "JIssue",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateIssueComment",
                    "args": [
                        {
                            "name": "issueId",
                            "type": "string"
                        },
                        {
                            "name": "comment",
                            "type": "JComment"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "jsdoctags": [
                        {
                            "name": "issueId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "comment",
                            "type": "JComment",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateProject",
                    "args": [
                        {
                            "name": "project",
                            "type": "Partial<JProject>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "Partial<JProject>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { arrayRemove, arrayUpsert, setLoading } from '@datorama/akita';\nimport { JComment } from '@trungk18/interface/comment';\nimport { JIssue } from '@trungk18/interface/issue';\nimport { JProject } from '@trungk18/interface/project';\nimport { DateUtil } from '@trungk18/project/utils/date';\nimport { of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport { ProjectStore } from './project.store';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProjectService {\n  baseUrl: string;\n\n  constructor(private _http: HttpClient, private _store: ProjectStore) {\n    this.baseUrl = environment.apiUrl;\n  }\n\n  setLoading(isLoading: boolean) {\n    this._store.setLoading(isLoading);\n  }\n\n  getProject() {\n    this._http\n      .get<JProject>(`${this.baseUrl}/project.json`)\n      .pipe(\n        setLoading(this._store),\n        tap((project) => {\n          this._store.update((state) => {\n            return {\n              ...state,\n              ...project\n            };\n          });\n        }),\n        catchError((error) => {\n          this._store.setError(error);\n          return of(error);\n        })\n      )\n      .subscribe();\n  }\n\n  updateProject(project: Partial<JProject>) {\n    this._store.update((state) => ({\n      ...state,\n      ...project\n    }));\n  }\n\n  updateIssue(issue: JIssue) {\n    issue.updatedAt = DateUtil.getNow();\n    this._store.update((state) => {\n      const issues = arrayUpsert(state.issues, issue.id, issue);\n      return {\n        ...state,\n        issues\n      };\n    });\n  }\n\n  deleteIssue(issueId: string) {\n    this._store.update((state) => {\n      const issues = arrayRemove(state.issues, issueId);\n      return {\n        ...state,\n        issues\n      };\n    });\n  }\n\n  updateIssueComment(issueId: string, comment: JComment) {\n    const allIssues = this._store.getValue().issues;\n    const issue = allIssues.find((x) => x.id === issueId);\n    if (!issue) {\n      return;\n    }\n\n    const comments = arrayUpsert(issue.comments ?? [], comment.id, comment);\n    this.updateIssue({\n      ...issue,\n      comments\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_http",
                        "type": "HttpClient"
                    },
                    {
                        "name": "_store",
                        "type": "ProjectStore"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "_http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_store",
                        "type": "ProjectStore",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ProjectStore",
            "id": "injectable-ProjectStore-d58ea2017d2feb69d516eef24e846b30",
            "file": "src/app/project/state/project/project.store.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { JProject } from '@trungk18/interface/project';\nimport { Store, StoreConfig } from '@datorama/akita';\nimport { Injectable } from '@angular/core';\n\nexport interface ProjectState extends JProject {}\n\nfunction createInitialState(): ProjectState {\n  return {\n    issues: [],\n    users: []\n  } as ProjectState;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\n@StoreConfig({\n  name: 'project'\n})\nexport class ProjectStore extends Store<ProjectState> {\n  constructor() {\n    super(createInitialState());\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 20
            },
            "extends": "Store",
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DateUtil",
            "id": "class-DateUtil-4bbb3108e7289db7e47792362ca29fef",
            "file": "src/app/project/utils/date.ts",
            "type": "class",
            "sourceCode": "export class DateUtil {\n  static getNow(): string {\n    return new Date().toISOString();\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getNow",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 2,
                    "modifierKind": [
                        115
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DeleteIssueModel",
            "id": "class-DeleteIssueModel-d37f5ed366d0e5481c64f3acc0f5290f",
            "file": "src/app/interface/ui-model/delete-issue-model.ts",
            "type": "class",
            "sourceCode": "import { NzModalRef } from 'ng-zorro-antd/modal';\n\nexport class DeleteIssueModel {\n  constructor(public issueId: string, public deleteModalRef: NzModalRef) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "issueId",
                        "type": "string"
                    },
                    {
                        "name": "deleteModalRef",
                        "type": "NzModalRef"
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "issueId",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "deleteModalRef",
                        "type": "NzModalRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "deleteModalRef",
                    "type": "NzModalRef",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "issueId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IssuePriorityIcon",
            "id": "class-IssuePriorityIcon-d6b32ca79d21476cef402416c98b72b4",
            "file": "src/app/interface/issue-priority-icon.ts",
            "type": "class",
            "sourceCode": "import { IssuePriority, IssuePriorityColors } from './issue';\n\nexport class IssuePriorityIcon {\n  icon: string;\n  value: string;\n  color: string;\n\n  constructor(issuePriority: IssuePriority) {\n    const lowerPriorities = [IssuePriority.LOW, IssuePriority.LOWEST];\n    this.value = issuePriority;\n    this.icon = lowerPriorities.includes(issuePriority) ? 'arrow-down' : 'arrow-up';\n    this.color = IssuePriorityColors[issuePriority];\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "issuePriority",
                        "type": "IssuePriority"
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "issuePriority",
                        "type": "IssuePriority",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "color",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "icon",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "value",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IssueStatusValueTitle",
            "id": "class-IssueStatusValueTitle-ea607f15ec592d16f5e9fff2e7116945",
            "file": "src/app/project/components/issues/issue-status/issue-status.component.ts",
            "type": "class",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { IssueStatus, IssueStatusDisplay, JIssue } from '@trungk18/interface/issue';\nimport { ProjectService } from '@trungk18/project/state/project/project.service';\nimport { ProjectQuery } from '@trungk18/project/state/project/project.query';\n\n@Component({\n  selector: 'issue-status',\n  templateUrl: './issue-status.component.html',\n  styleUrls: ['./issue-status.component.scss']\n})\nexport class IssueStatusComponent implements OnInit {\n  @Input() issue: JIssue;\n  IssueStatusDisplay = IssueStatusDisplay;\n\n  variants = {\n    [IssueStatus.BACKLOG]: 'btn-secondary',\n    [IssueStatus.SELECTED]: 'btn-secondary',\n    [IssueStatus.IN_PROGRESS]: 'btn-primary',\n    [IssueStatus.DONE]: 'btn-success'\n  };\n\n  issueStatuses: IssueStatusValueTitle[];\n\n  constructor(private _projectService: ProjectService, private _projectQuery: ProjectQuery) {}\n\n  ngOnInit(): void {\n    this.issueStatuses = [\n      new IssueStatusValueTitle(IssueStatus.BACKLOG),\n      new IssueStatusValueTitle(IssueStatus.SELECTED),\n      new IssueStatusValueTitle(IssueStatus.IN_PROGRESS),\n      new IssueStatusValueTitle(IssueStatus.DONE)\n    ];\n  }\n\n  updateIssue(status: IssueStatus) {\n    const newPosition = this._projectQuery.lastIssuePosition(status);\n    this._projectService.updateIssue({\n      ...this.issue,\n      status,\n      listPosition: newPosition + 1\n    });\n  }\n\n  isStatusSelected(status: IssueStatus) {\n    return this.issue.status === status;\n  }\n}\n\nclass IssueStatusValueTitle {\n  value: IssueStatus;\n  label: string;\n  constructor(issueStatus: IssueStatus) {\n    this.value = issueStatus;\n    this.label = IssueStatusDisplay[issueStatus];\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "issueStatus",
                        "type": "IssueStatus"
                    }
                ],
                "line": 51,
                "jsdoctags": [
                    {
                        "name": "issueStatus",
                        "type": "IssueStatus",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "value",
                    "type": "IssueStatus",
                    "optional": false,
                    "description": "",
                    "line": 50
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IssueTypeWithIcon",
            "id": "class-IssueTypeWithIcon-83939e9b3fda52c1e94a0d4599648b33",
            "file": "src/app/interface/issue-type-icon.ts",
            "type": "class",
            "sourceCode": "import { IssueType } from './issue';\nimport { IssueUtil } from '@trungk18/project/utils/issue';\n\nexport class IssueTypeWithIcon {\n  value: string;\n  icon: string;\n\n  constructor(issueType: IssueType) {\n    this.value = issueType;\n    this.icon = IssueUtil.getIssueTypeIcon(issueType);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "issueType",
                        "type": "IssueType"
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "issueType",
                        "type": "IssueType",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "icon",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "value",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "IssueUtil",
            "id": "class-IssueUtil-e446712748a4bf052df3c61a6760c1b2",
            "file": "src/app/project/utils/issue.ts",
            "type": "class",
            "sourceCode": "import { IssuePriority, IssueType } from '@trungk18/interface/issue';\nimport { IssuePriorityIcon } from '@trungk18/interface/issue-priority-icon';\n\nexport class IssueUtil {\n  static getIssueTypeIcon(issueType: IssueType): string {\n    return issueType?.toLowerCase();\n  }\n\n  static getIssuePriorityIcon(issuePriority: IssuePriority): IssuePriorityIcon {\n    return new IssuePriorityIcon(issuePriority);\n  }\n\n  static getRandomId(): string {\n    return `${Math.ceil(Math.random() * 8000)}`;\n  }\n\n  static searchString(str: string, searchString: string): boolean {\n    str = str ?? '';\n    searchString = searchString ?? '';\n    return str.trim().toLowerCase().includes(searchString.trim().toLowerCase());\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getIssuePriorityIcon",
                    "args": [
                        {
                            "name": "issuePriority",
                            "type": "IssuePriority"
                        }
                    ],
                    "optional": false,
                    "returnType": "IssuePriorityIcon",
                    "typeParameters": [],
                    "line": 9,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "issuePriority",
                            "type": "IssuePriority",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getIssueTypeIcon",
                    "args": [
                        {
                            "name": "issueType",
                            "type": "IssueType"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 5,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "issueType",
                            "type": "IssueType",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRandomId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 13,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "searchString",
                    "args": [
                        {
                            "name": "str",
                            "type": "string"
                        },
                        {
                            "name": "searchString",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 17,
                    "modifierKind": [
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "str",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "searchString",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "JComment",
            "id": "class-JComment-2557c6ab623bcb19ca8af3a632e4837c",
            "file": "src/app/interface/comment.ts",
            "type": "class",
            "sourceCode": "import { JUser } from './user';\n\nexport class JComment {\n  constructor(issueId: string, user: JUser) {\n    const now = new Date();\n    this.id = `${now.getTime()}`;\n    this.issueId = issueId;\n    this.user = user;\n    this.createdAt = now.toISOString();\n    this.updatedAt = now.toISOString();\n  }\n\n  id: string;\n  body: string;\n  createdAt: string;\n  updatedAt: string;\n  issueId: string;\n  userId: string;\n  // mapped to display by userId\n  user: JUser;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "issueId",
                        "type": "string"
                    },
                    {
                        "name": "user",
                        "type": "JUser"
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "issueId",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "user",
                        "type": "JUser",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "body",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "createdAt",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "issueId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "updatedAt",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "user",
                    "type": "JUser",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "userId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LoginPayload",
            "id": "class-LoginPayload-39ccb3fe79ba50cac141f7f6c2342bf2",
            "file": "src/app/project/auth/loginPayload.ts",
            "type": "class",
            "sourceCode": "export class LoginPayload {\n  email: string;\n  password: string;\n  constructor() {\n    this.email = 'trungk18@gmail.com';\n    this.password = `${new Date().getTime()}`;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 3
            },
            "properties": [
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "password",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "NavItem",
            "id": "class-NavItem-122e640c94ca53b1ba08d397d46172a0",
            "file": "src/app/project/components/navigation/navbar-left/navbar-left.component.ts",
            "type": "class",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { AuthQuery } from '@trungk18/project/auth/auth.query';\nimport { NzDrawerService } from 'ng-zorro-antd/drawer';\nimport { SearchDrawerComponent } from '../../search/search-drawer/search-drawer.component';\nimport { NzModalService } from 'ng-zorro-antd/modal';\nimport { AddIssueModalComponent } from '../../add-issue-modal/add-issue-modal.component';\n\n@Component({\n  selector: 'app-navbar-left',\n  templateUrl: './navbar-left.component.html',\n  styleUrls: ['./navbar-left.component.scss']\n})\nexport class NavbarLeftComponent implements OnInit {\n  items: NavItem[];\n  constructor(\n    public authQuery: AuthQuery,\n    private _drawerService: NzDrawerService,\n    private _modalService: NzModalService\n  ) {}\n\n  ngOnInit(): void {\n    this.items = [\n      new NavItem('search', 'Search issues', this.openSearchDrawler.bind(this)),\n      new NavItem('plus', 'Create issue', this.openCreateIssueModal.bind(this))\n    ];\n  }\n\n  openCreateIssueModal() {\n    this._modalService.create({\n      nzContent: AddIssueModalComponent,\n      nzClosable: false,\n      nzFooter: null,\n      nzWidth: 700\n    });\n  }\n\n  openSearchDrawler() {\n    this._drawerService.create({\n      nzContent: SearchDrawerComponent,\n      nzTitle: null,\n      nzPlacement: 'left',\n      nzClosable: false,\n      nzWidth: 500\n    });\n  }\n}\n\nclass NavItem {\n  constructor(public icon: string, public tooltip: string, public handler: Handler) {}\n}\n\ntype Handler = () => void;\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "icon",
                        "type": "string"
                    },
                    {
                        "name": "tooltip",
                        "type": "string"
                    },
                    {
                        "name": "handler",
                        "type": "Handler"
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": "icon",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tooltip",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "handler",
                        "type": "Handler",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "handler",
                    "type": "Handler",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "icon",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "tooltip",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProjectConst",
            "id": "class-ProjectConst-28ec508debc582de4c9f4f6aface78b9",
            "file": "src/app/project/config/const.ts",
            "type": "class",
            "sourceCode": "import { IssuePriorityIcon } from '@trungk18/interface/issue-priority-icon';\nimport { IssuePriority, IssueType } from '@trungk18/interface/issue';\nimport { IssueUtil } from '../utils/issue';\nimport { IssueTypeWithIcon } from '@trungk18/interface/issue-type-icon';\n\nexport class ProjectConst {\n  static readonly IssueId = 'issueId';\n  static readonly Projects = 'Projects';\n  static PrioritiesWithIcon: IssuePriorityIcon[] = [\n    IssueUtil.getIssuePriorityIcon(IssuePriority.LOWEST),\n    IssueUtil.getIssuePriorityIcon(IssuePriority.LOW),\n    IssueUtil.getIssuePriorityIcon(IssuePriority.MEDIUM),\n    IssueUtil.getIssuePriorityIcon(IssuePriority.HIGH),\n    IssueUtil.getIssuePriorityIcon(IssuePriority.HIGHEST)\n  ];\n\n  static IssueTypesWithIcon: IssueTypeWithIcon[] = [\n    new IssueTypeWithIcon(IssueType.BUG),\n    new IssueTypeWithIcon(IssueType.STORY),\n    new IssueTypeWithIcon(IssueType.TASK)\n  ];\n}\n",
            "properties": [
                {
                    "name": "IssueId",
                    "defaultValue": "'issueId'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        115,
                        132
                    ]
                },
                {
                    "name": "IssueTypesWithIcon",
                    "defaultValue": "[\n    new IssueTypeWithIcon(IssueType.BUG),\n    new IssueTypeWithIcon(IssueType.STORY),\n    new IssueTypeWithIcon(IssueType.TASK)\n  ]",
                    "type": "IssueTypeWithIcon[]",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "PrioritiesWithIcon",
                    "defaultValue": "[\n    IssueUtil.getIssuePriorityIcon(IssuePriority.LOWEST),\n    IssueUtil.getIssuePriorityIcon(IssuePriority.LOW),\n    IssueUtil.getIssuePriorityIcon(IssuePriority.MEDIUM),\n    IssueUtil.getIssuePriorityIcon(IssuePriority.HIGH),\n    IssueUtil.getIssuePriorityIcon(IssuePriority.HIGHEST)\n  ]",
                    "type": "IssuePriorityIcon[]",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        115
                    ]
                },
                {
                    "name": "Projects",
                    "defaultValue": "'Projects'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        115,
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SideBarLink",
            "id": "class-SideBarLink-776dda2f8cf101268a4b5166821fe379",
            "file": "src/app/interface/ui-model/nav-link.ts",
            "type": "class",
            "sourceCode": "export class SideBarLink {\n  constructor(public name: string, public icon: string, public url?: string) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "name": "icon",
                        "type": "string"
                    },
                    {
                        "name": "url",
                        "type": "string",
                        "optional": true
                    }
                ],
                "line": 1,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "icon",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "url",
                        "type": "string",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "icon",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "url",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "AutofocusDirective",
            "id": "directive-AutofocusDirective-4ed6dd09b0f4119701c7ea034dc26e4e",
            "file": "src/app/core/directives/autofocus.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { AfterContentInit, Directive, ElementRef, Input, OnDestroy } from '@angular/core';\n\nconst BASE_TIMER_DELAY = 10;\n\n@Directive({\n  selector: '[jAutofocus]'\n})\nexport class AutofocusDirective implements AfterContentInit, OnDestroy {\n  @Input('jAutofocus') enable: boolean | string;\n  @Input() timerDelay: number = BASE_TIMER_DELAY;\n\n  private elementRef: ElementRef;\n  private timer: any;\n\n  constructor(elementRef: ElementRef) {\n    this.elementRef = elementRef;\n    this.timer = null;\n  }\n\n  public ngAfterContentInit(): void {\n    this.setDefaultValue();\n    if (this.enable) {\n      this.startFocusWorkflow();\n    }\n  }\n\n  public ngOnDestroy(): void {\n    this.stopFocusWorkflow();\n  }\n\n  private setDefaultValue() {\n    if (this.enable === false) {\n      return;\n    }\n    this.enable = true;\n  }\n\n  private startFocusWorkflow(): void {\n    if (this.timer) {\n      return;\n    }\n\n    this.timer = setTimeout((): void => {\n      this.timer = null;\n      this.elementRef.nativeElement.focus();\n    }, this.timerDelay);\n  }\n\n  private stopFocusWorkflow(): void {\n    clearTimeout(this.timer);\n    this.timer = null;\n  }\n}\n",
            "selector": "[jAutofocus]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "jAutofocus",
                    "line": 9,
                    "type": "boolean | string"
                },
                {
                    "name": "timerDelay",
                    "defaultValue": "BASE_TIMER_DELAY",
                    "line": 10,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "elementRef",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "timer",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "setDefaultValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "startFocusWorkflow",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "stopFocusWorkflow",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "implements": [
                "AfterContentInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AddIssueModalComponent",
            "id": "component-AddIssueModalComponent-c9ecb59afb955b428f19a5b5df85db21",
            "file": "src/app/project/components/add-issue-modal/add-issue-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "add-issue-modal",
            "styleUrls": [
                "./add-issue-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-issue-modal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "assignees$",
                    "type": "Observable<JUser[]>",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "editorOptions",
                    "defaultValue": "quillConfiguration",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "issueForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "reporterUsers$",
                    "type": "Observable<JUser[]>",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81
                },
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85
                },
                {
                    "name": "initForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38
                },
                {
                    "name": "submitForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { IssueType, JIssue, IssueStatus, IssuePriority } from '@trungk18/interface/issue';\nimport { quillConfiguration } from '@trungk18/project/config/editor';\nimport { NzModalRef } from 'ng-zorro-antd/modal';\nimport { ProjectService } from '@trungk18/project/state/project/project.service';\nimport { IssueUtil } from '@trungk18/project/utils/issue';\nimport { ProjectQuery } from '@trungk18/project/state/project/project.query';\nimport { untilDestroyed, UntilDestroy } from '@ngneat/until-destroy';\nimport { Observable } from 'rxjs';\nimport { JUser } from '@trungk18/interface/user';\nimport { tap } from 'rxjs/operators';\nimport { NoWhitespaceValidator } from '@trungk18/core/validators/no-whitespace.validator';\nimport { DateUtil } from '@trungk18/project/utils/date';\n\n@Component({\n  selector: 'add-issue-modal',\n  templateUrl: './add-issue-modal.component.html',\n  styleUrls: ['./add-issue-modal.component.scss']\n})\n@UntilDestroy()\nexport class AddIssueModalComponent implements OnInit {\n  reporterUsers$: Observable<JUser[]>;\n  assignees$: Observable<JUser[]>;\n  issueForm: FormGroup;\n  editorOptions = quillConfiguration;\n\n  get f() {\n    return this.issueForm?.controls;\n  }\n\n  constructor(\n    private _fb: FormBuilder,\n    private _modalRef: NzModalRef,\n    private _projectService: ProjectService,\n    private _projectQuery: ProjectQuery) {}\n\n  ngOnInit(): void {\n    this.initForm();\n    this.reporterUsers$ = this._projectQuery.users$.pipe(\n      untilDestroyed(this),\n      tap((users) => {\n        const [user] = users;\n        if (user) {\n          this.f.reporterId.patchValue(user.id);\n        }\n      })\n    );\n\n    this.assignees$ = this._projectQuery.users$;\n  }\n\n  initForm() {\n    this.issueForm = this._fb.group({\n      type: [IssueType.TASK],\n      priority: [IssuePriority.MEDIUM],\n      title: ['', NoWhitespaceValidator()],\n      description: [''],\n      reporterId: [''],\n      userIds: [[]]\n    });\n  }\n\n  submitForm() {\n    if (this.issueForm.invalid) {\n      return;\n    }\n    const now = DateUtil.getNow();\n    const issue: JIssue = {\n      ...this.issueForm.getRawValue(),\n      id: IssueUtil.getRandomId(),\n      status: IssueStatus.BACKLOG,\n      createdAt: now,\n      updatedAt: now\n    };\n\n    this._projectService.updateIssue(issue);\n    this.closeModal();\n  }\n\n  cancel() {\n    this.closeModal();\n  }\n\n  closeModal() {\n    this._modalRef.close();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".form-action {\n  text-align: right;\n}",
                    "styleUrl": "./add-issue-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "_modalRef",
                        "type": "NzModalRef"
                    },
                    {
                        "name": "_projectService",
                        "type": "ProjectService"
                    },
                    {
                        "name": "_projectQuery",
                        "type": "ProjectQuery"
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "_fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_modalRef",
                        "type": "NzModalRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_projectService",
                        "type": "ProjectService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_projectQuery",
                        "type": "ProjectQuery",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "f": {
                    "name": "f",
                    "getSignature": {
                        "name": "f",
                        "type": "",
                        "returnType": "",
                        "line": 28
                    }
                }
            },
            "templateData": "<div class=\"px-8 py-5\">\n    <div class=\"flex items-center py-3 text-textDarkest\">\n        <div class=\"text-xl\">\n            Create issue\n        </div>\n        <div class=\"flex-auto\"></div>\n        <j-button icon=\"times\"\n                  [iconSize]=\"24\"\n                  (click)=\"closeModal()\"\n                  [className]=\"'btn-empty'\">\n        </j-button>\n    </div>\n    <form class=\"issue-form\"\n          [formGroup]=\"issueForm\">\n        <div class=\"form-group\">\n            <label class=\"label\">\n                Issue type\n            </label>\n            <issue-type-select [control]=\"f?.type\"></issue-type-select>\n        </div>\n        <div class=\"mt-3 form-group\">\n            <label class=\"label\">\n                Issue priority\n            </label>\n            <issue-priority-select [control]=\"f?.priority\"></issue-priority-select>\n        </div>\n        <div class=\"mt-3 form-group\">\n            <label class=\"label\">\n                Short summary\n            </label>\n            <input class=\"form-input\"\n                   formControlName=\"title\"\n                   jAutofocus\n                   [timerDelay]=\"500\" />\n        </div>\n        <div class=\"mt-3 form-group\">\n            <label class=\"label\">\n                Description\n            </label>\n            <quill-editor class=\"content-editor\"\n                          [styles]=\"{'min-height': '120px'}\"\n                          [modules]=\"editorOptions\"\n                          formControlName=\"description\"\n                          [placeholder]=\"''\">\n            </quill-editor>\n        </div>\n        <div class=\"mt-3 form-group\">\n            <label class=\"label\">\n                Reporter\n            </label>\n            <issue-reporter-select [control]=\"f?.reporterId\"\n                                   [users]=\"reporterUsers$ | async\">\n            </issue-reporter-select>\n        </div>\n        <div class=\"mt-3 form-group\">\n            <label class=\"label\">\n                Assignees\n            </label>\n            <issue-assignees-select [control]=\"f.userIds\"\n                                    [users]=\"assignees$ | async\">\n            </issue-assignees-select>\n        </div>\n        <div class=\"mt-5 form-group form-action\">\n            <j-button className=\"btn-primary mr-2\"\n                      type=\"submit\"\n                      [disabled]=\"issueForm?.invalid\"\n                      (click)=\"submitForm()\">\n                Create Issue\n            </j-button>\n            <j-button className=\"btn-empty\"\n                      (click)=\"cancel()\">\n                Cancel\n            </j-button>\n        </div>\n    </form>\n</div>"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-24478e46957da0d685d13f9d2000be4c",
            "file": "src/app/app.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "handleGoogleAnalytics",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "projectQuery",
                    "type": "ProjectQuery",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "router",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ViewEncapsulation, AfterViewInit, ChangeDetectorRef } from '@angular/core';\nimport { Router, NavigationEnd } from '@angular/router';\nimport { environment } from '../environments/environment';\nimport { ProjectQuery } from './project/state/project/project.query';\nimport { ProjectService } from './project/state/project/project.service';\nimport { GoogleAnalyticsService } from './core/services/google-analytics.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class AppComponent implements AfterViewInit {\n  constructor(\n    public router: Router,\n    public projectQuery: ProjectQuery,\n    private _cdr: ChangeDetectorRef,\n    private _projectService: ProjectService,\n    private _googleAnalytics: GoogleAnalyticsService\n  ) {\n    this._projectService.setLoading(true);\n\n    if (environment.production) {\n      this.router.events.subscribe(this.handleGoogleAnalytics);\n    }\n  }\n\n  handleGoogleAnalytics = (event: any): void => {\n    if (event instanceof NavigationEnd) {\n      this._googleAnalytics.sendPageView(event.urlAfterRedirects);\n    }\n  }\n\n  ngAfterViewInit() {\n    this._cdr.detectChanges();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import './core/styles/custom';\n\n#app-frame {\n  position: absolute;\n  width: 100vw;\n  height: 100vh;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n\n  > nz-spin {\n    @apply flex flex-grow;\n\n    > .ant-spin-container {\n      @apply flex flex-grow;\n    }\n  }\n}\n\napp-project {\n  @apply flex;\n  flex-grow: 1;\n  flex-direction: column;\n  /* for Firefox */\n  min-height: 0;\n}\n\nboard-dnd {\n  @apply flex flex-grow;\n}\n\n.global-spinner {\n  @apply min-h-screen;\n  .ant-spin {\n    max-height: unset !important;\n  }\n}\n\n//ng-zorro override\nbody {\n  overflow: hidden;\n}\n\nbody,\n.ant-modal {\n  @apply text-textDark;\n}\n\n.ant-modal-body {\n  padding: 0;\n}\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "projectQuery",
                        "type": "ProjectQuery"
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "_projectService",
                        "type": "ProjectService"
                    },
                    {
                        "name": "_googleAnalytics",
                        "type": "GoogleAnalyticsService"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "projectQuery",
                        "type": "ProjectQuery",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_cdr",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_projectService",
                        "type": "ProjectService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_googleAnalytics",
                        "type": "GoogleAnalyticsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<div id=\"app-frame\">\n    <nz-spin class=\"global-spinner\"\n             [nzSpinning]=\"projectQuery.isLoading$ | async\"\n             nzSize=\"large\">\n        <router-outlet></router-outlet>\n    </nz-spin>\n</div>"
        },
        {
            "name": "AvatarComponent",
            "id": "component-AvatarComponent-0a4aea88bd44d1bef72a211595bb15a3",
            "file": "src/app/jira-control/avatar/avatar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "j-avatar",
            "styleUrls": [
                "./avatar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./avatar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "avatarUrl",
                    "line": 9,
                    "type": "string"
                },
                {
                    "name": "className",
                    "defaultValue": "''",
                    "line": 13
                },
                {
                    "name": "name",
                    "defaultValue": "''",
                    "line": 11
                },
                {
                    "name": "rounded",
                    "defaultValue": "true",
                    "line": 12
                },
                {
                    "name": "size",
                    "defaultValue": "12",
                    "line": 10
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'j-avatar',\n  templateUrl: './avatar.component.html',\n  styleUrls: ['./avatar.component.scss']\n})\nexport class AvatarComponent {\n  @Input() avatarUrl: string;\n  @Input() size = 12;\n  @Input() name = '';\n  @Input() rounded = true;\n  @Input() className = '';\n\n  get style() {\n    return {\n      width: `${this.size}px`,\n      height: `${this.size}px`,\n      'background-image': `url('${this.avatarUrl}')`,\n      'border-radius': this.rounded ? '100%' : '3px'\n    };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".avatar-container {\n  background-position: 50% 50%;\n  background-repeat: no-repeat;\n  background-size: cover;  \n}\n",
                    "styleUrl": "./avatar.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "style": {
                    "name": "style",
                    "getSignature": {
                        "name": "style",
                        "type": "",
                        "returnType": "",
                        "line": 15
                    }
                }
            },
            "templateData": "<div *ngIf=\"avatarUrl\"\n     [ngClass]=\"['avatar-container', className]\"\n     [ngStyle]=\"style\">\n</div>"
        },
        {
            "name": "BoardComponent",
            "id": "component-BoardComponent-c5f4b6faebd0faa9afb327f7c7981d89",
            "file": "src/app/project/pages/board/board.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "board",
            "styleUrls": [
                "./board.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./board.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "breadcrumbs",
                    "defaultValue": "['Projects', 'Angular Jira Clone', 'Kanban Board']",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "sendTwitterEventButton",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { GoogleAnalyticsService } from '@trungk18/core/services/google-analytics.service';\n\n@Component({\n  selector: 'board',\n  templateUrl: './board.component.html',\n  styleUrls: ['./board.component.scss']\n})\nexport class BoardComponent {\n  breadcrumbs: string[] = ['Projects', 'Angular Jira Clone', 'Kanban Board'];\n\n  constructor(private _googleAnalytics: GoogleAnalyticsService) {}\n\n  sendTwitterEventButton() {\n    this._googleAnalytics.sendEvent('Share Twitter', 'button');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./board.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_googleAnalytics",
                        "type": "GoogleAnalyticsService"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "_googleAnalytics",
                        "type": "GoogleAnalyticsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"flex flex-col w-full h-full py-8 pl-8 pr-6\">\n    <breadcrumbs [items]=\"breadcrumbs\"></breadcrumbs>\n    <header class=\"flex justify-between mt-3 text-textDarkest\">\n        <div class=\"text-2xl font-medium\">Kanban board</div>\n        <div class=\"social-links\">\n            <a href=\"https://www.buymeacoffee.com/tuantrungvo\"\n               target=\"_blank\"\n               rel=\"noopener\">\n                <j-button className=\"btn-secondary mr-2\"> 🍺 Buy me a beer\n                </j-button>\n            </a>\n\n            <a href=\"https://tetris.trungk18.com/\"\n               target=\"_blank\"\n               rel=\"noopener\">\n                <j-button className=\"btn-secondary mr-2\"> 🎮 Angular Tetris\n                </j-button>\n            </a>\n\n            <a href=\"https://jira-storybook.trungk18.com/\"\n               target=\"_blank\"\n               rel=\"noopener\">\n                <j-button className=\"btn-secondary mr-2\"> 📕 Storybook\n                </j-button>\n            </a>\n\n            <a href=\"https://twitter.com/intent/tweet?url=https%3A%2F%2Fgithub.com%2Ftrungk18%2Fjira-clone-angular&text=Awesome%20Jira%20clone%20app%20built%20with%20Angular%209%20and%20Akita&hashtags=angular,akita,typescript\"\n               (click)=\"sendTwitterEventButton()\"\n               target=\"_blank\"\n               rel=\"noopener\"\n               class=\"mr-2\">\n                <j-button className=\"btn-secondary\">\n                    <div class=\"flex items-center\">\n                        <i class=\"mr-2 text-blue-500\"\n                           nz-icon\n                           nzType=\"twitter\"\n                           nzTheme=\"outline\"></i> Tweet\n                    </div>\n                </j-button>\n            </a>\n            <a href=\"https://github.com/trungk18/jira-clone-angular\"\n               target=\"_blank\"\n               rel=\"noopener\">\n                <j-button className=\"btn-secondary\"\n                          icon=\"github\">Source Code\n                </j-button>\n            </a>\n        </div>\n    </header>\n\n    <board-filter></board-filter>\n    <board-dnd></board-dnd>\n</div>"
        },
        {
            "name": "BoardDndComponent",
            "id": "component-BoardDndComponent-e43e798fcaf484725f451476382165e6",
            "file": "src/app/project/components/board/board-dnd/board-dnd.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "board-dnd",
            "styleUrls": [
                "./board-dnd.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./board-dnd.component.html"
            ],
            "viewProviders": [],
            "propertiesClass": [
                {
                    "name": "authQuery",
                    "type": "AuthQuery",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "issueStatuses",
                    "defaultValue": "[\n    IssueStatus.BACKLOG,\n    IssueStatus.SELECTED,\n    IssueStatus.IN_PROGRESS,\n    IssueStatus.DONE\n  ]",
                    "type": "IssueStatus[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "projectQuery",
                    "type": "ProjectQuery",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { UntilDestroy } from '@ngneat/until-destroy';\nimport { IssueStatus } from '@trungk18/interface/issue';\nimport { ProjectQuery } from '@trungk18/project/state/project/project.query';\nimport { AuthQuery } from '@trungk18/project/auth/auth.query';\n@UntilDestroy()\n@Component({\n  selector: 'board-dnd',\n  templateUrl: './board-dnd.component.html',\n  styleUrls: ['./board-dnd.component.scss']\n})\nexport class BoardDndComponent {\n  issueStatuses: IssueStatus[] = [\n    IssueStatus.BACKLOG,\n    IssueStatus.SELECTED,\n    IssueStatus.IN_PROGRESS,\n    IssueStatus.DONE\n  ];\n\n  constructor(public projectQuery: ProjectQuery, public authQuery: AuthQuery) {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".board-dnd-list {\n  @apply mr-2 flex flex-col  rounded-sm bg-backgroundLightest flex-shrink-0;\n  width: calc(100% / 4 - 8px);\n  min-height: 400px;\n  min-width: 200px;  \n}\n",
                    "styleUrl": "./board-dnd.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "projectQuery",
                        "type": "ProjectQuery"
                    },
                    {
                        "name": "authQuery",
                        "type": "AuthQuery"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "projectQuery",
                        "type": "ProjectQuery",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authQuery",
                        "type": "AuthQuery",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"flex container mt-7\"\n     cdkDropListGroup>\n    <div class=\"board-dnd-list\"\n         board-dnd-list\n         *ngFor=\"let status of issueStatuses\"\n         [status]=\"status\"\n         [currentUserId]=\"authQuery.userId$ | async\"\n         [issues$]=\"projectQuery.issueByStatusSorted$(status)\">\n    </div>\n</div>"
        },
        {
            "name": "BoardDndListComponent",
            "id": "component-BoardDndListComponent-9585bf7e476e94fb658c08920d45ce0c",
            "file": "src/app/project/components/board/board-dnd-list/board-dnd-list.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[board-dnd-list]",
            "styleUrls": [
                "./board-dnd-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./board-dnd-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentUserId",
                    "line": 22,
                    "type": "string"
                },
                {
                    "name": "issues$",
                    "line": 23,
                    "type": "Observable<JIssue[]>"
                },
                {
                    "name": "status",
                    "line": 21,
                    "type": "IssueStatus"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "issues",
                    "defaultValue": "[]",
                    "type": "JIssue[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "IssueStatusDisplay",
                    "defaultValue": "IssueStatusDisplay",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<JIssue[]>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<JIssue[]>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterIssues",
                    "args": [
                        {
                            "name": "issues",
                            "type": "JIssue[]"
                        },
                        {
                            "name": "filter",
                            "type": "FilterState"
                        }
                    ],
                    "optional": false,
                    "returnType": "JIssue[]",
                    "typeParameters": [],
                    "line": 66,
                    "jsdoctags": [
                        {
                            "name": "issues",
                            "type": "JIssue[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "filter",
                            "type": "FilterState",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isDateWithinThreeDaysFromNow",
                    "args": [
                        {
                            "name": "date",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 87,
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                },
                {
                    "name": "updateListPosition",
                    "args": [
                        {
                            "name": "newList",
                            "type": "JIssue[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "newList",
                            "type": "JIssue[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { CdkDragDrop, moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';\nimport { Component, Input, OnInit, ViewEncapsulation } from '@angular/core';\nimport { IssueStatus, IssueStatusDisplay, JIssue } from '@trungk18/interface/issue';\nimport { FilterState } from '@trungk18/project/state/filter/filter.store';\nimport { ProjectService } from '@trungk18/project/state/project/project.service';\nimport { Observable, combineLatest } from 'rxjs';\nimport { untilDestroyed, UntilDestroy } from '@ngneat/until-destroy';\nimport { FilterQuery } from '@trungk18/project/state/filter/filter.query';\nimport * as dateFns from 'date-fns';\nimport { IssueUtil } from '@trungk18/project/utils/issue';\n\n@Component({\n  selector: '[board-dnd-list]',\n  templateUrl: './board-dnd-list.component.html',\n  styleUrls: ['./board-dnd-list.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\n@UntilDestroy()\nexport class BoardDndListComponent implements OnInit {\n  IssueStatusDisplay = IssueStatusDisplay;\n  @Input() status: IssueStatus;\n  @Input() currentUserId: string;\n  @Input() issues$: Observable<JIssue[]>;\n  issues: JIssue[] = [];\n\n  get issuesCount(): number {\n    return this.issues.length;\n  }\n\n  constructor(private _projectService: ProjectService, private _filterQuery: FilterQuery) {}\n\n  ngOnInit(): void {\n    combineLatest([this.issues$, this._filterQuery.all$])\n      .pipe(untilDestroyed(this))\n      .subscribe(([issues, filter]) => {\n        this.issues = this.filterIssues(issues, filter);\n      });\n  }\n\n  drop(event: CdkDragDrop<JIssue[]>) {\n    const newIssue: JIssue = { ...event.item.data };\n    const newIssues = [...event.container.data];\n    if (event.previousContainer === event.container) {\n      moveItemInArray(newIssues, event.previousIndex, event.currentIndex);\n      this.updateListPosition(newIssues);\n    } else {\n      transferArrayItem(\n        event.previousContainer.data,\n        newIssues,\n        event.previousIndex,\n        event.currentIndex\n      );\n      this.updateListPosition(newIssues);\n      newIssue.status = event.container.id as IssueStatus;\n      this._projectService.updateIssue(newIssue);\n    }\n  }\n\n  private updateListPosition(newList: JIssue[]) {\n    newList.forEach((issue, idx) => {\n      const newIssueWithNewPosition = { ...issue, listPosition: idx + 1 };\n      this._projectService.updateIssue(newIssueWithNewPosition);\n    });\n  }\n\n  filterIssues(issues: JIssue[], filter: FilterState): JIssue[] {\n    const { onlyMyIssue, ignoreResolved, searchTerm, userIds } = filter;\n    return issues.filter((issue) => {\n      const isMatchTerm = searchTerm\n        ? IssueUtil.searchString(issue.title, searchTerm)\n        : true;\n\n      const isIncludeUsers = userIds.length\n        ? issue.userIds.some((userId) => userIds.includes(userId))\n        : true;\n\n      const isMyIssue = onlyMyIssue\n        ? this.currentUserId && issue.userIds.includes(this.currentUserId)\n        : true;\n\n      const isIgnoreResolved = ignoreResolved ? issue.status !== IssueStatus.DONE : true;\n\n      return isMatchTerm && isIncludeUsers && isMyIssue && isIgnoreResolved;\n    });\n  }\n\n  isDateWithinThreeDaysFromNow(date: string) {\n    const now = new Date();\n    const inputDate = new Date(date);\n    return dateFns.isAfter(inputDate, dateFns.subDays(now, 3));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".status-list {\n  @apply mr-2 flex flex-col h-full rounded-sm bg-backgroundLightest flex-shrink-0;\n  padding-bottom: 20px;\n\n  .cdk-drop-list-dragging {\n    transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n\n    .cdk-drag:not(.cdk-drag-placeholder) {\n      transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n    }\n  }\n}\n\n.cdk-drag-preview {\n  box-sizing: border-box;\n  border-radius: 4px;\n  box-shadow: 0 5px 5px -3px rgba(0, 0, 0, 0.2), 0 8px 10px 1px rgba(0, 0, 0, 0.14),\n    0 3px 14px 2px rgba(0, 0, 0, 0.12);\n}\n\n.cdk-drag-placeholder {\n  .issue-wrap {\n    background-color: rgba(150, 150, 200, 0.1);\n    border: 1px dashed #abc;\n    margin: 5px;\n\n    .issue {\n      opacity: 0;\n    }\n  }\n}\n\n.cdk-drag-animating {\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n}\n",
                    "styleUrl": "./board-dnd-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_projectService",
                        "type": "ProjectService"
                    },
                    {
                        "name": "_filterQuery",
                        "type": "FilterQuery"
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "_projectService",
                        "type": "ProjectService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_filterQuery",
                        "type": "FilterQuery",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "issuesCount": {
                    "name": "issuesCount",
                    "getSignature": {
                        "name": "issuesCount",
                        "type": "number",
                        "returnType": "number",
                        "line": 26
                    }
                }
            },
            "templateData": "<div class=\"status-list\">\n    <div class=\"px-3 pb-4 pt-3 uppercase text-textMedium text-13 truncate\">\n        {{ IssueStatusDisplay[status] }}\n        <span class=\"lowercase text-13\">{{ issuesCount }}</span>\n    </div>\n    <div class=\"h-full pl-2\"\n         cdkDropList\n         [cdkDropListData]=\"issues\"\n         [id]=\"status\"\n         (cdkDropListDropped)=\"drop($event)\">\n        <issue-card *ngFor=\"let issue of issues\"\n                    [issue]=\"issue\"\n                    cdkDrag\n                    [cdkDragData]=\"issue\">\n        </issue-card>\n    </div>\n</div>"
        },
        {
            "name": "BoardFilterComponent",
            "id": "component-BoardFilterComponent-8d352584d590937cfc01a58c48ce9589",
            "file": "src/app/project/components/board/board-filter/board-filter.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "board-filter",
            "styleUrls": [
                "./board-filter.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./board-filter.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "filterQuery",
                    "type": "FilterQuery",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "filterService",
                    "type": "FilterService",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "projectQuery",
                    "type": "ProjectQuery",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "searchControl",
                    "defaultValue": "new FormControl('')",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "userIds",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ignoreResolvedChanged",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44
                },
                {
                    "name": "isUserSelected",
                    "args": [
                        {
                            "name": "user",
                            "type": "JUser"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 40,
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "JUser",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "onlyMyIssueChanged",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48
                },
                {
                    "name": "resetAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56
                },
                {
                    "name": "userChanged",
                    "args": [
                        {
                            "name": "user",
                            "type": "JUser"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "JUser",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { FilterQuery } from '@trungk18/project/state/filter/filter.query';\nimport { FilterService } from '@trungk18/project/state/filter/filter.service';\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\nimport { ProjectQuery } from '@trungk18/project/state/project/project.query';\nimport { JUser } from '@trungk18/interface/user';\n\n@Component({\n  selector: 'board-filter',\n  templateUrl: './board-filter.component.html',\n  styleUrls: ['./board-filter.component.scss']\n})\n@UntilDestroy()\nexport class BoardFilterComponent implements OnInit {\n  searchControl: FormControl = new FormControl('');\n  userIds: string[];\n\n  constructor(\n    public projectQuery: ProjectQuery,\n    public filterQuery: FilterQuery,\n    public filterService: FilterService\n  ) {\n    this.userIds = [];\n  }\n\n  ngOnInit(): void {\n    this.searchControl.valueChanges\n      .pipe(debounceTime(100), distinctUntilChanged(), untilDestroyed(this))\n      .subscribe((term) => {\n        this.filterService.updateSearchTerm(term);\n      });\n\n    this.filterQuery.userIds$.pipe(untilDestroyed(this)).subscribe((userIds) => {\n      this.userIds = userIds;\n    });\n  }\n\n  isUserSelected(user: JUser) {\n    return this.userIds.includes(user.id);\n  }\n\n  ignoreResolvedChanged() {\n    this.filterService.toggleIgnoreResolve();\n  }\n\n  onlyMyIssueChanged() {\n    this.filterService.toggleOnlyMyIssue();\n  }\n\n  userChanged(user: JUser) {\n    this.filterService.toggleUserId(user.id);\n  }\n\n  resetAll() {\n    this.searchControl.setValue('');\n    this.filterService.resetAll();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".lift-avatar {\n  @apply cursor-pointer -ml-1 flex rounded-full transition-transform duration-100;\n  \n  &.is-active {\n    box-shadow: 0 0 0 4px #1255b9;\n    z-index: 1;\n  }\n\n  &:hover {\n    transform: translateY(-5px);\n  }\n}\n",
                    "styleUrl": "./board-filter.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "projectQuery",
                        "type": "ProjectQuery"
                    },
                    {
                        "name": "filterQuery",
                        "type": "FilterQuery"
                    },
                    {
                        "name": "filterService",
                        "type": "FilterService"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "projectQuery",
                        "type": "ProjectQuery",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "filterQuery",
                        "type": "FilterQuery",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "filterService",
                        "type": "FilterService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"flex items-center mt-6\">\n    <form class=\"w-40 mr-4\">\n        <j-input aria-label=\"search\"\n                 icon=\"search\"                 \n                 [control]=\"searchControl\">\n        </j-input>\n    </form>\n    <div class=\"flex flex-row mr-3\">\n        <div *ngFor=\"let user of projectQuery.users$ | async\"\n             class=\"lift-avatar\"\n             nz-tooltip\n             [nzTooltipPlacement]=\"'bottom'\"\n             [class.is-active]=\"isUserSelected(user)\"\n             [nzTooltipTitle]=\"user.name\">\n            <j-avatar class=\"flex\"\n                      className=\"select-none shadow-outline-white\"\n                      [avatarUrl]=\"user.avatarUrl\"\n                      [size]=\"36\"\n                      (click)=\"userChanged(user)\">\n            </j-avatar>\n        </div>\n    </div>\n    <j-button class=\"ml-3\"\n              className=\"btn-empty\"\n              [isActive]=\"filterQuery.onlyMyIssue$ | async\"\n              (click)=\"onlyMyIssueChanged()\">\n        Only My Issues\n    </j-button>\n    <j-button class=\"ml-3\"\n              [isActive]=\"filterQuery.ignoreResolve$ | async\"\n              (click)=\"ignoreResolvedChanged()\"\n              className=\"btn-empty\">\n        Ignore Resolved\n    </j-button>\n    <div class=\"ml-3 flex items-center\"\n         *ngIf=\"filterQuery.any$ | async\">\n        <div class=\"mr-3 w-px bg-backgroundMedium self-stretch\"></div>\n        <j-button [className]=\"'btn-secondary'\"\n                  (click)=\"resetAll()\">Clear all\n        </j-button>\n    </div>\n</div>"
        },
        {
            "name": "BreadcrumbsComponent",
            "id": "component-BreadcrumbsComponent-2a7ebe3885fa67ac94fd8c77fa00641c",
            "file": "src/app/jira-control/breadcrumbs/breadcrumbs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "breadcrumbs",
            "styleUrls": [
                "./breadcrumbs.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./breadcrumbs.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "line": 9,
                    "type": "string[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'breadcrumbs',\n  templateUrl: './breadcrumbs.component.html',\n  styleUrls: ['./breadcrumbs.component.scss']\n})\nexport class BreadcrumbsComponent {\n  @Input() items: string[] = [];\n  constructor() {}\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./breadcrumbs.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "templateData": "<div class=\"text-textMedium text-15\">\n    <span *ngFor=\"let item of items; let idx = index\">\n        <span class=\"relative mx-2 font-lg\"\n              *ngIf=\"idx !== 0\">/</span>\n        {{ item }}\n    </span>\n</div>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-af0912c1e763bff248a9dd57271b105b",
            "file": "src/app/jira-control/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "j-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "className",
                    "defaultValue": "'btn-primary'",
                    "line": 10
                },
                {
                    "name": "disabled",
                    "line": 15,
                    "type": "boolean"
                },
                {
                    "name": "icon",
                    "line": 11,
                    "type": "string"
                },
                {
                    "name": "iconSize",
                    "defaultValue": "18",
                    "line": 12
                },
                {
                    "name": "isActive",
                    "line": 14,
                    "type": "boolean"
                },
                {
                    "name": "isWorking",
                    "line": 13,
                    "type": "boolean"
                },
                {
                    "name": "type",
                    "defaultValue": "'button'",
                    "line": 9
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'j-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss']\n})\nexport class ButtonComponent {\n  @Input() type = 'button';\n  @Input() className = 'btn-primary';\n  @Input() icon: string;\n  @Input() iconSize = 18;\n  @Input() isWorking: boolean;\n  @Input() isActive: boolean;\n  @Input() disabled: boolean;\n\n  constructor() {}\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "$primary: #0052cc;\n$success: #0b875b;\n$danger: #e13c3c;\n$warning: #f89c1c;\n$info: #0fb9b1;\n$secondary: #f4f5f7;\n$jira-bg: rgb(222, 235, 255);\n\n.btn {\n  @apply text-btn inline-flex items-center justify-center h-8 align-middle leading-none whitespace-no-wrap rounded-sm transition-all duration-100 appearance-none cursor-pointer select-none px-3;\n\n  &.icon-only {\n    @apply px-2;\n\n    .with-padding {\n      padding: 0;\n    }\n  }\n\n  &.disabled {\n    @apply opacity-50 cursor-default pointer-events-none;\n  }\n\n  &:focus,\n  &:active {\n    outline-color: #1890ff;\n  }\n\n  &.no-padding-left {\n    padding-left: 0;\n  }\n\n  &.no-padding-right {\n    padding-right: 0;\n  }\n}\n\n@mixin buttonBackground($btn-variant, $background) {\n  $background-dark: darken($background, 10%);\n  $background-light: lighten($background, 10%);\n\n  .btn-#{$btn-variant} {\n    color: white;\n    font-weight: 500;\n    background: $background;\n    &:disabled {\n      cursor: not-allowed;\n      background-color: lighten($background, 30%);\n    }\n\n    &:not(:disabled) {\n      &:hover {\n        background: $background-light;\n      }\n      &:active {\n        background: $background-dark;\n      }\n      &.active {\n        background: $background-dark !important;\n      }\n    }\n  }\n}\n@include buttonBackground(primary, $primary);\n@include buttonBackground(success, $success);\n\n.btn-secondary {\n  @apply text-textDark font-normal;\n  background: $secondary;\n\n  &:not(:disabled) {\n    &:hover {\n      @apply bg-backgroundLight;\n    }\n\n    &:active {\n      @apply bg-backgroundLightPrimary;\n      color: $primary;\n    }\n  }\n}\n\n.btn-empty {\n  background: white;\n  outline: none;\n  @apply text-textDark;\n\n  &:focus,\n  &:active {\n    outline: none;\n  }\n\n  &:not(:disabled) {\n    &:hover {\n      @apply bg-backgroundLight;\n    }\n    &:active {\n      @apply bg-backgroundLightPrimary;\n      color: $primary;\n    }\n    &.is-active {\n      background-color: $jira-bg;\n      @apply text-textDark;\n    }\n  }\n}\n\n.with-padding {\n  @apply pl-2;\n}\n\n.is-active {\n  @apply text-textLink bg-backgroundLightPrimary;\n}\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 15
            },
            "templateData": "<button [type]=\"type\"\n        [ngClass]=\"['btn', className, isActive ? 'is-active': '', content?.innerHTML?.trim() ? '': 'icon-only']\"\n        [disabled]=\"disabled\">\n    <svg-icon *ngIf=\"!isWorking && icon\"\n              [name]=\"icon\"\n              [size]=\"iconSize\">\n    </svg-icon>\n    <svg-icon *ngIf=\"isWorking\"\n              name=\"spin\"\n              class=\"spinner\"\n              [size]=\"iconSize\">\n    </svg-icon>\n    <span #content\n          [class.with-padding]=\"isWorking || icon\">\n        <ng-content></ng-content>\n    </span>\n</button>"
        },
        {
            "name": "FullIssueDetailComponent",
            "id": "component-FullIssueDetailComponent-8898b5e7b84a989311978a165f3a2d43",
            "file": "src/app/project/pages/full-issue-detail/full-issue-detail.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "full-issue-detail",
            "styleUrls": [
                "./full-issue-detail.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./full-issue-detail.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "issueById$",
                    "type": "Observable<JIssue>",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "issueId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "project",
                    "type": "JProject",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "backHome",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "deleteIssue",
                    "args": [
                        {
                            "type": "DeleteIssueModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "jsdoctags": [
                        {
                            "type": "DeleteIssueModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getIssue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ProjectConst } from '@trungk18/project/config/const';\nimport { ProjectQuery } from '@trungk18/project/state/project/project.query';\nimport { JProject } from '@trungk18/interface/project';\nimport { untilDestroyed, UntilDestroy } from '@ngneat/until-destroy';\nimport { Observable } from 'rxjs';\nimport { JIssue } from '@trungk18/interface/issue';\nimport { ProjectService } from '@trungk18/project/state/project/project.service';\nimport { DeleteIssueModel } from '@trungk18/interface/ui-model/delete-issue-model';\n\n@Component({\n  selector: 'full-issue-detail',\n  templateUrl: './full-issue-detail.component.html',\n  styleUrls: ['./full-issue-detail.component.scss']\n})\n@UntilDestroy()\nexport class FullIssueDetailComponent implements OnInit {\n  project: JProject;\n  issueById$: Observable<JIssue>;\n  issueId: string;\n  get breadcrumbs(): string[] {\n    return [ProjectConst.Projects, this.project?.name, 'Issues', this.issueId];\n  }\n\n  constructor(\n    private _router: Router,\n    private _route: ActivatedRoute,\n    private _projectQuery: ProjectQuery,\n    private _projectService: ProjectService\n  ) {}\n\n  ngOnInit(): void {\n    this.getIssue();\n    this._projectQuery.all$.pipe(untilDestroyed(this)).subscribe((project) => {\n      this.project = project;\n    });\n  }\n\n  private getIssue() {\n    this.issueId = this._route.snapshot.paramMap.get(ProjectConst.IssueId);\n    if (!this.issueId) {\n      this.backHome();\n      return;\n    }\n    this.issueById$ = this._projectQuery.issueById$(this.issueId);\n  }\n\n  deleteIssue({issueId, deleteModalRef}: DeleteIssueModel) {\n    this._projectService.deleteIssue(issueId);\n    deleteModalRef.close();\n    this.backHome();\n  }\n\n  private backHome() {\n    this._router.navigate(['/']);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./full-issue-detail.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_router",
                        "type": "Router"
                    },
                    {
                        "name": "_route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "_projectQuery",
                        "type": "ProjectQuery"
                    },
                    {
                        "name": "_projectService",
                        "type": "ProjectService"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "_router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_projectQuery",
                        "type": "ProjectQuery",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_projectService",
                        "type": "ProjectService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "breadcrumbs": {
                    "name": "breadcrumbs",
                    "getSignature": {
                        "name": "breadcrumbs",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 22
                    }
                }
            },
            "templateData": "<div class=\"pr-6 py-8 pl-8 h-full w-full flex flex-col\">\n    <breadcrumbs [items]=\"breadcrumbs\"></breadcrumbs>\n    <issue-detail *ngIf=\"issueId\"\n                  [issue]=\"issueById$ | async\"\n                  [isShowCloseButton]=\"false\"\n                  [isShowFullScreenButton]=\"false\"\n                  (onDelete)=\"deleteIssue($event)\">\n    </issue-detail>\n</div>"
        },
        {
            "name": "InputComponent",
            "id": "component-InputComponent-b22ba19dcb48b1b521a7ebb62f0c25d5",
            "file": "src/app/jira-control/input/input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "j-input",
            "styleUrls": [
                "./input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "containerClassName",
                    "defaultValue": "''",
                    "line": 11
                },
                {
                    "name": "control",
                    "line": 10,
                    "type": "FormControl"
                },
                {
                    "name": "enableClearButton",
                    "line": 15,
                    "type": "boolean"
                },
                {
                    "name": "icon",
                    "line": 12,
                    "type": "string"
                },
                {
                    "name": "iconSize",
                    "defaultValue": "16",
                    "line": 13
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "line": 14
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'j-input',\n  templateUrl: './input.component.html',\n  styleUrls: ['./input.component.scss']\n})\nexport class InputComponent implements OnInit {\n  @Input() control: FormControl;\n  @Input() containerClassName = '';\n  @Input() icon: string;\n  @Input() iconSize = 16;\n  @Input() placeholder = '';\n  @Input() enableClearButton: boolean;\n\n  get iconContainerWidth(): number {\n    return this.iconSize * 2;\n  }\n\n  get isShowClearButton(): boolean {\n    return this.enableClearButton && this.control?.value;\n  }\n\n  constructor() {}\n\n  ngOnInit(): void {\n    this.control = this.control ?? new FormControl('');\n  }\n\n  clear() {\n    this.control.patchValue('');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".input-container {\n  position: relative;\n  display: flex;\n  height: 32px;\n  width: 100%;\n\n  &.flat {\n    height: 40px;\n    .input {\n      flex-grow: 1;\n      border: none;\n      border-bottom: 2px solid #0052cc;\n      font-size: 21px;\n      background: #fff;\n\n      &::placeholder {\n        @apply text-textLight;\n        font-size: 21px;\n      }\n      &:focus,\n      &:hover {\n        border: none;\n        border-bottom: 2px solid #0052cc;\n        box-shadow: none;\n        background: #fff;\n        outline: 0;\n      }\n    }\n  }\n}\n\n.invalid {\n  &,\n  &:focus {\n    border: 1px solid #e13c3c;\n    box-shadow: none;\n  }\n}\n\n.input-icon-container {\n  position: absolute;\n  height: 100%;\n  left: 0;\n  top: 0;\n  bottom: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  &.right {\n    left: auto;\n    right: 0;\n    cursor: pointer;\n  }\n}\n",
                    "styleUrl": "./input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 23
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "iconContainerWidth": {
                    "name": "iconContainerWidth",
                    "getSignature": {
                        "name": "iconContainerWidth",
                        "type": "number",
                        "returnType": "number",
                        "line": 17
                    }
                },
                "isShowClearButton": {
                    "name": "isShowClearButton",
                    "getSignature": {
                        "name": "isShowClearButton",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 21
                    }
                }
            },
            "templateData": "<div [ngClass]=\"['input-container', containerClassName]\">\n    <div *ngIf=\"icon\"\n         class=\"input-icon-container\"\n         [style.width.px]=\"iconContainerWidth\">\n        <svg-icon [name]=\"icon\"\n                  [size]=\"iconSize\">\n        </svg-icon>\n    </div>\n\n    <input [formControl]=\"control\"\n           [placeholder]=\"placeholder\"\n           [ngClass]=\"['input', 'form-input']\"\n           [style.padding-left.px]=\"icon ? iconContainerWidth : 0\"\n           [style.padding-right.px]=\"isShowClearButton ? iconContainerWidth : 0\" />\n\n    <div *ngIf=\"isShowClearButton\"\n         class=\"input-icon-container right\"\n         [style.width.px]=\"iconContainerWidth\">\n        <i nz-icon\n           nzType=\"close\"\n           nzTheme=\"outline\"\n           (click)=\"clear()\"></i>\n    </div>\n</div>"
        },
        {
            "name": "IssueAssigneesComponent",
            "id": "component-IssueAssigneesComponent-afbbee334906777c78db162aad3d516a",
            "file": "src/app/project/components/issues/issue-assignees/issue-assignees.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "issue-assignees",
            "styleUrls": [
                "./issue-assignees.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./issue-assignees.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "issue",
                    "line": 14,
                    "type": "JIssue"
                },
                {
                    "name": "users",
                    "line": 15,
                    "type": "JUser[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "assignees",
                    "type": "JUser[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "addUserToIssue",
                    "args": [
                        {
                            "name": "user",
                            "type": "JUser"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "JUser",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isUserSelected",
                    "args": [
                        {
                            "name": "user",
                            "type": "JUser"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "JUser",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                },
                {
                    "name": "removeUser",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { UntilDestroy } from '@ngneat/until-destroy';\nimport { JIssue } from '@trungk18/interface/issue';\nimport { JUser } from '@trungk18/interface/user';\nimport { ProjectService } from '@trungk18/project/state/project/project.service';\n\n@Component({\n  selector: 'issue-assignees',\n  templateUrl: './issue-assignees.component.html',\n  styleUrls: ['./issue-assignees.component.scss']\n})\n@UntilDestroy()\nexport class IssueAssigneesComponent implements OnInit, OnChanges {\n  @Input() issue: JIssue;\n  @Input() users: JUser[];\n  assignees: JUser[];\n\n  constructor(private _projectService: ProjectService) {}\n\n  ngOnInit(): void {\n    this.assignees = this.issue.userIds.map((userId) => this.users.find((x) => x.id === userId));\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const issueChange = changes.issue;\n    if (this.users && issueChange.currentValue !== issueChange.previousValue) {\n      this.assignees = this.issue.userIds.map((userId) => this.users.find((x) => x.id === userId));\n    }\n  }\n\n  removeUser(userId: string) {\n    const newUserIds = this.issue.userIds.filter((x) => x !== userId);\n    this._projectService.updateIssue({\n      ...this.issue,\n      userIds: newUserIds\n    });\n  }\n\n  addUserToIssue(user: JUser) {\n    this._projectService.updateIssue({\n      ...this.issue,\n      userIds: [...this.issue.userIds, user.id]\n    });\n  }\n\n  isUserSelected(user: JUser): boolean {\n    return this.issue.userIds.includes(user.id);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".add-more {\n  font-size: 12.5px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  color: #0052cc;\n\n  &:hover,\n  &:visited,\n  &:active {\n    color: #0052cc;\n  }\n\n  &:hover {\n    text-decoration: underline;\n  }  \n}\n",
                    "styleUrl": "./issue-assignees.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_projectService",
                        "type": "ProjectService"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "_projectService",
                        "type": "ProjectService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<div class=\"mt-6 mb-1 uppercase text-textMedium text-13 font-bold\">\n    Assignees\n</div>\n\n<j-button *ngFor=\"let assignee of assignees\"\n          [className]=\"'btn-secondary mr-1-5 mb-2'\">\n    <div class=\"flex items-center\">\n        <j-user [user]=\"assignee\"></j-user>\n        <svg-icon (click)=\"removeUser(assignee.id)\"\n                  title=\"Remove user\"\n                  [size]=\"20\"\n                  [name]=\"'times'\"\n                  class=\"text-textLight\">\n        </svg-icon>\n    </div>\n</j-button>\n\n<a class=\"add-more\"\n   nz-dropdown\n   [nzTrigger]=\"'click'\"\n   [nzDropdownMenu]=\"menu\">\n    <i class=\"mr-1\"\n       nz-icon\n       nzType=\"plus\"\n       nzTheme=\"outline\"></i>\n    Add Assignee\n</a>\n\n<nz-dropdown-menu #menu=\"nzDropdownMenu\">\n    <ul class=\"mt-3\"\n        nz-menu\n        nzNoAnimation>\n        <ng-container *ngFor=\"let option of users\">\n            <li nz-menu-item\n                *ngIf=\"!isUserSelected(option)\"\n                (click)=\"addUserToIssue(option)\">\n                <j-user [user]=\"option\"></j-user>\n            </li>\n        </ng-container>\n    </ul>\n</nz-dropdown-menu>"
        },
        {
            "name": "IssueAssigneesSelectComponent",
            "id": "component-IssueAssigneesSelectComponent-e317ff594fb4bed3cc8620bd7bcd9a63",
            "file": "src/app/project/components/add-issue-modal/issue-assignees-select/issue-assignees-select.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "issue-assignees-select",
            "styleUrls": [
                "./issue-assignees-select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./issue-assignees-select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "control",
                    "line": 12,
                    "type": "FormControl"
                },
                {
                    "name": "users",
                    "line": 13,
                    "type": "JUser[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getUser",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\nimport { JUser } from '@trungk18/interface/user';\nimport { FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'issue-assignees-select',\n  templateUrl: './issue-assignees-select.component.html',\n  styleUrls: ['./issue-assignees-select.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class IssueAssigneesSelectComponent {\n  @Input() control: FormControl;\n  @Input() users: JUser[];\n\n  constructor() {}\n\n  getUser(userId: string): any {\n    return this.users.find((user) => user.id === userId);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "issue-assignees-select .ant-select-selection-item-remove {\n  line-height: unset;\n  margin-top: -2px;\n}\n",
                    "styleUrl": "./issue-assignees-select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 13
            },
            "templateData": "<nz-select class=\"w-full\"\n           [formControl]=\"control\"\n           nzMode=\"multiple\"\n           [nzCustomTemplate]=\"assigneesSelectedTmpl\"\n           [nzNotFoundContent]=\"noUserFoundTmpl\"\n           nzNoAnimation>\n    <nz-option nzCustomContent\n               *ngFor=\"let user of users\"\n               [nzValue]=\"user.id\"\n               [nzLabel]=\"user.name\">\n        <j-user [user]=\"user\"></j-user>\n    </nz-option>\n</nz-select>\n<ng-template #assigneesSelectedTmpl\n             let-selected>\n    <j-user [user]=\"getUser(selected.nzValue)\"></j-user>\n</ng-template>\n<ng-template #noUserFoundTmpl>\n    No user found.\n</ng-template>"
        },
        {
            "name": "IssueCardComponent",
            "id": "component-IssueCardComponent-9aeec0fb3473131ae732b625d5769d43",
            "file": "src/app/project/components/issues/issue-card/issue-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "issue-card",
            "styleUrls": [
                "./issue-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./issue-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "issue",
                    "line": 18,
                    "type": "JIssue"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "assignees",
                    "type": "JUser[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "issueTypeIcon",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "priorityIcon",
                    "type": "IssuePriorityIcon",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "openIssueModal",
                    "args": [
                        {
                            "name": "issueId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "issueId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, Input, OnChanges, OnInit, SimpleChanges} from '@angular/core';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { JIssue } from '@trungk18/interface/issue';\nimport { IssuePriorityIcon } from '@trungk18/interface/issue-priority-icon';\nimport { JUser } from '@trungk18/interface/user';\nimport { ProjectQuery } from '@trungk18/project/state/project/project.query';\nimport { IssueUtil } from '@trungk18/project/utils/issue';\nimport { NzModalService } from 'ng-zorro-antd/modal';\nimport { IssueModalComponent } from '../issue-modal/issue-modal.component';\n\n@Component({\n  selector: 'issue-card',\n  templateUrl: './issue-card.component.html',\n  styleUrls: ['./issue-card.component.scss']\n})\n@UntilDestroy()\nexport class IssueCardComponent implements OnChanges, OnInit {\n  @Input() issue: JIssue;\n  assignees: JUser[];\n  issueTypeIcon: string;\n  priorityIcon: IssuePriorityIcon;\n\n  constructor(private _projectQuery: ProjectQuery, private _modalService: NzModalService) {}\n\n  ngOnInit(): void {\n    this._projectQuery.users$.pipe(untilDestroyed(this)).subscribe((users) => {\n      this.assignees = this.issue.userIds.map((userId) => users.find((x) => x.id === userId));\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const issueChange = changes.issue;\n    if (issueChange?.currentValue !== issueChange.previousValue) {\n      this.issueTypeIcon = IssueUtil.getIssueTypeIcon(this.issue.type);\n      this.priorityIcon = IssueUtil.getIssuePriorityIcon(this.issue.priority);\n    }\n  }\n\n  openIssueModal(issueId: string) {\n    this._modalService.create({\n      nzContent: IssueModalComponent,\n      nzWidth: 1040,\n      nzClosable: false,\n      nzFooter: null,\n      nzComponentParams: {\n        issue$: this._projectQuery.issueById$(issueId)\n      }\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  @apply flex flex-grow;\n  margin-bottom: 5px;\n}\n\n.issue-wrap {\n  touch-action: manipulation;\n  cursor: grab;\n  @apply flex flex-grow;\n}\n\n.issue {\n  @apply flex flex-grow flex-col rounded-sm bg-white transition-all duration-100 select-none;\n  padding: 10px;\n  box-shadow: rgba(9, 30, 66, 0.25) 0px 1px 2px 0px;\n}\n\n.issue:hover {\n  @apply bg-backgroundLight;\n}\n",
                    "styleUrl": "./issue-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_projectQuery",
                        "type": "ProjectQuery"
                    },
                    {
                        "name": "_modalService",
                        "type": "NzModalService"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "_projectQuery",
                        "type": "ProjectQuery",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_modalService",
                        "type": "NzModalService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges",
                "OnInit"
            ],
            "templateData": "<div class=\"issue-wrap\">\n    <div (click)=\"openIssueModal(issue.id)\"\n         class=\"issue\">\n        <p class=\"pb-3 text-15 text-textDarkest\">\n            {{ issue.title }}\n        </p>\n        <div class=\"flex items-center justify-between\">\n            <div class=\"flex items-center ml-1\">            \n                <j-avatar *ngFor=\"let user of assignees\"\n                          [className]=\"'shadow-outline-white -ml-1'\"\n                          [size]=\"24\"\n                          nz-tooltip\n                          [nzTooltipMouseEnterDelay]=\"0.3\"\n                          nzTooltipTitle=\"Assignee: {{ user.name }}\"\n                          nzTooltipPlacement=\"bottom\"\n                          [avatarUrl]=\"user.avatarUrl\">\n                </j-avatar>                \n                <span [class.ml-3]=\"assignees?.length\" class=\"uppercase\">\n                    {{issue.type}}-{{issue.id}}\n                </span>\n            </div>\n            <div class=\"flex items-center\">\n                <svg-icon class=\"mr-1 text-textMedium\"\n                          [name]=\"issueTypeIcon\"\n                          nz-tooltip\n                          [nzTooltipMouseEnterDelay]=\"0.3\"\n                          [nzTooltipTitle]=\"issue.type\"\n                          nzTooltipPlacement=\"bottom\"\n                          [size]=\"20\">\n                </svg-icon>\n\n                <svg-icon [name]=\"priorityIcon.icon\"\n                          nz-tooltip\n                          [nzTooltipMouseEnterDelay]=\"0.3\"\n                          [nzTooltipTitle]=\"priorityIcon.value\"\n                          nzTooltipPlacement=\"bottom\"\n                          [size]=\"20\"\n                          [style.color]=\"priorityIcon.color\">\n                </svg-icon>\n            </div>            \n        </div>\n    </div>\n</div>"
        },
        {
            "name": "IssueCommentComponent",
            "id": "component-IssueCommentComponent-aa1fe1f3ba56f35f9ed5bbf6860debec",
            "file": "src/app/project/components/issues/issue-comment/issue-comment.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "issue-comment",
            "styleUrls": [
                "./issue-comment.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./issue-comment.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "comment",
                    "line": 17,
                    "type": "JComment"
                },
                {
                    "name": "createMode",
                    "line": 18,
                    "type": "boolean"
                },
                {
                    "name": "issueId",
                    "line": 16,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "commentBoxRef",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'commentBoxRef'"
                        }
                    ]
                },
                {
                    "name": "commentControl",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "isEditing",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "user",
                    "type": "JUser",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "addComment",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54
                },
                {
                    "name": "cancelAddComment",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40
                },
                {
                    "name": "setCommentEdit",
                    "args": [
                        {
                            "name": "mode",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "mode",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:keyup",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 30
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, HostListener, ElementRef, ViewChild } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { JComment } from '@trungk18/interface/comment';\nimport { JUser } from '@trungk18/interface/user';\nimport { AuthQuery } from '@trungk18/project/auth/auth.query';\nimport { ProjectService } from '@trungk18/project/state/project/project.service';\n\n@Component({\n  selector: 'issue-comment',\n  templateUrl: './issue-comment.component.html',\n  styleUrls: ['./issue-comment.component.scss']\n})\n@UntilDestroy()\nexport class IssueCommentComponent implements OnInit {\n  @Input() issueId: string;\n  @Input() comment: JComment;\n  @Input() createMode: boolean;\n  @ViewChild('commentBoxRef') commentBoxRef: ElementRef;\n  commentControl: FormControl;\n  user: JUser;\n  isEditing: boolean;\n\n  constructor(\n    private _authQuery: AuthQuery,\n    private projectService: ProjectService\n  ) {}\n\n  @HostListener('window:keyup', ['$event'])\n  keyEvent(event: KeyboardEvent) {\n    if (!this.createMode || this.isEditing) {\n      return;\n    }\n    if (event.key === 'M') {\n      this.commentBoxRef.nativeElement.focus();\n      this.isEditing = true;\n    }\n  }\n\n  ngOnInit(): void {\n    this.commentControl = new FormControl('');\n    this._authQuery.user$.pipe(untilDestroyed(this)).subscribe((user) => {\n      this.user = user;\n      if (this.createMode) {\n        this.comment = new JComment(this.issueId, this.user);\n      }\n    });\n  }\n\n  setCommentEdit(mode: boolean) {\n    this.isEditing = mode;\n  }\n\n  addComment() {\n    const now = new Date();\n    this.projectService.updateIssueComment(this.issueId, {\n      ...this.comment,\n      id: `${now.getTime()}`,\n      createdAt: now.toISOString(),\n      updatedAt: now.toISOString(),\n      body: this.commentControl.value\n    });\n    this.cancelAddComment();\n  }\n\n  cancelAddComment() {\n    this.commentControl.patchValue('');\n    this.setCommentEdit(false);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".textarea-border {\n    color: rgb(137, 147, 164);\n    border: 1px solid rgb(223, 225, 230);\n    cursor: text;\n    user-select: none;\n    padding: 12px 16px;\n    border-radius: 4px;\n  }",
                    "styleUrl": "./issue-comment.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_authQuery",
                        "type": "AuthQuery"
                    },
                    {
                        "name": "projectService",
                        "type": "ProjectService"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "_authQuery",
                        "type": "AuthQuery",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "projectService",
                        "type": "ProjectService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"relative mt-3 text-15\">\n    <j-avatar class=\"absolute top-0 left-0\"\n              [avatarUrl]=\"user.avatarUrl\"\n              [size]=\"30\">\n    </j-avatar>\n    <div class=\"pl-10\"\n         *ngIf=\"comment\">\n        <div class=\"inline-block mr-3 mb-2 text-textDark font-medium\">\n            {{ comment.user.name}}\n        </div>\n        <div *ngIf=\"!createMode\"\n             class=\"inline-block pb-2 text-textDark text-sm\">\n            {{ comment.updatedAt | date:\"medium\" }}\n        </div>\n        <div class=\"editing-area\"\n             *ngIf=\"createMode\">\n            <textarea #commentBoxRef\n                      class=\"textarea-inline-control textarea-border\"\n                      [formControl]=\"commentControl\"\n                      placeholder=\"Add a comment\"\n                      [rows]=\"2\"\n                      cdkTextareaAutosize\n                      (click)=\"setCommentEdit(true)\">\n            </textarea>\n            <div *ngIf=\"!isEditing\"\n                 class=\"text-xs\"><strong>Pro tip: </strong>press <span class=\"px-1 font-semibold bg-backgroundMedium\">M</span> to comment\n            </div>\n            <div *ngIf=\"isEditing\"\n                 class=\"flex pt-2 pb-4 items-center\">\n                <j-button [className]=\"'btn btn-primary mr-2'\"\n                          (click)=\"addComment()\">\n                    Save\n                </j-button>\n                <j-button [className]=\"'btn btn-empty'\"\n                          (click)=\"cancelAddComment()\">\n                    Cancel\n                </j-button>\n            </div>\n        </div>\n        <div *ngIf=\"!createMode\"\n             [innerHTML]=\"comment.body\">\n        </div>\n    </div>\n</div>"
        },
        {
            "name": "IssueCommentsComponent",
            "id": "component-IssueCommentsComponent-5c6190a8890a83885139a56fb457a6ea",
            "file": "src/app/project/components/issues/issue-comments/issue-comments.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "issue-comments",
            "styleUrls": [
                "./issue-comments.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./issue-comments.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "issue",
                    "line": 10,
                    "type": "JIssue"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input  } from '@angular/core';\nimport { JIssue } from '@trungk18/interface/issue';\n\n@Component({\n  selector: 'issue-comments',\n  templateUrl: './issue-comments.component.html',\n  styleUrls: ['./issue-comments.component.scss']\n})\nexport class IssueCommentsComponent {\n  @Input() issue: JIssue;\n\n  constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./issue-comments.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 10
            },
            "templateData": "<issue-comment [createMode]=\"true\"\n               [issueId]=\"issue?.id\">\n\n</issue-comment>\n<issue-comment *ngFor=\"let comment of issue?.comments\"\n               [comment]=\"comment\">\n</issue-comment>"
        },
        {
            "name": "IssueDeleteModalComponent",
            "id": "component-IssueDeleteModalComponent-790adfe01b0ab9aa62804f179ceaa0a8",
            "file": "src/app/project/components/issues/issue-delete-modal/issue-delete-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "issue-delete-modal",
            "styleUrls": [
                "./issue-delete-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./issue-delete-modal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "issueId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "onDelete",
                    "defaultValue": "new EventEmitter<DeleteIssueModel>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "deleteIssue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter } from '@angular/core';\nimport { NzModalRef } from 'ng-zorro-antd/modal';\nimport { DeleteIssueModel } from '@trungk18/interface/ui-model/delete-issue-model';\n\n@Component({\n  selector: 'issue-delete-modal',\n  templateUrl: './issue-delete-modal.component.html',\n  styleUrls: ['./issue-delete-modal.component.scss']\n})\nexport class IssueDeleteModalComponent {\n  issueId: string;\n\n  onDelete = new EventEmitter<DeleteIssueModel>();\n\n  constructor(private _modalRef: NzModalRef) {}\n\n  deleteIssue() {\n    this.onDelete.emit(new DeleteIssueModel(this.issueId, this._modalRef));\n  }\n\n  closeModal() {\n    this._modalRef.close();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./issue-delete-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_modalRef",
                        "type": "NzModalRef"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "_modalRef",
                        "type": "NzModalRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"px-10 py-8\">\n    <div class=\"pb-4 text-2xl font-medium leading-normal text-textDarkest\">\n        Are you sure you want to delete this issue?\n    </div>\n    <p class=\"pb-4 whitespace-pre-wrap text-15\">This action cannot be undone.</p>\n    <div class=\"flex pt-3\">\n        <j-button className=\"btn-primary mr-2\" (click)=\"deleteIssue()\">Delete</j-button>\n        <j-button className=\"'btn-empty'\"\n                  (click)=\"closeModal()\">\n            Cancel</j-button>\n    </div>\n</div>"
        },
        {
            "name": "IssueDescriptionComponent",
            "id": "component-IssueDescriptionComponent-91eec2541d4dcdd74ce3149d5adb8b52",
            "file": "src/app/project/components/issues/issue-description/issue-description.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "issue-description",
            "styleUrls": [
                "./issue-description.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./issue-description.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "issue",
                    "line": 14,
                    "type": "JIssue"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "descriptionControl",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "editorOptions",
                    "defaultValue": "quillConfiguration",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "isEditing",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "isWorking",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47
                },
                {
                    "name": "editorCreated",
                    "args": [
                        {
                            "name": "editor",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "jsdoctags": [
                        {
                            "name": "editor",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39
                },
                {
                    "name": "setEditMode",
                    "args": [
                        {
                            "name": "mode",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "name": "mode",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnChanges, SimpleChanges, ViewEncapsulation } from '@angular/core';\nimport { JIssue } from '@trungk18/interface/issue';\nimport { FormControl } from '@angular/forms';\nimport { quillConfiguration } from '@trungk18/project/config/editor';\nimport { ProjectService } from '@trungk18/project/state/project/project.service';\n\n@Component({\n  selector: 'issue-description',\n  templateUrl: './issue-description.component.html',\n  styleUrls: ['./issue-description.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class IssueDescriptionComponent implements OnChanges {\n  @Input() issue: JIssue;\n  descriptionControl: FormControl;\n  editorOptions = quillConfiguration;\n  isEditing: boolean;\n  isWorking: boolean;\n\n  constructor(private _projectService: ProjectService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const issueChange = changes.issue;\n    if (issueChange.currentValue !== issueChange.previousValue) {\n      this.descriptionControl = new FormControl(this.issue.description);\n    }\n  }\n\n  setEditMode(mode: boolean) {\n    this.isEditing = mode;\n  }\n\n  editorCreated(editor: any) {\n    if (editor && editor.focus) {\n      editor.focus();\n    }\n  }\n\n  save() {\n    this._projectService.updateIssue({\n      ...this.issue,\n      description: this.descriptionControl.value\n    });\n    this.setEditMode(false);\n  }\n\n  cancel() {\n    this.descriptionControl.patchValue(this.issue.description);\n    this.setEditMode(false);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".content-readonly {\n  position: relative;\n  min-height: 50px;\n  cursor: pointer;\n  \n  .icon-edit {\n    @apply font-normal;\n    display: none;\n    position: absolute;\n    right: 3px;\n    top: 3px;\n  }\n\n  &:hover {\n    box-shadow: none;\n    border: none;\n    background-color: #f4f5f7;\n\n    .icon-edit {\n      display: block;\n    }\n  }\n\n  .ql-editor {\n    padding: 0 !important;\n    font-size: 15px;\n  }\n}\n\n.ql-editor {\n  height: auto !important;\n\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6 {\n    @apply font-medium;\n    margin-bottom: 10px;\n  }\n  img,\n  video {\n    display: inline-block;\n  }\n\n  ul {\n    @apply pl-2;\n  }\n}\n",
                    "styleUrl": "./issue-description.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_projectService",
                        "type": "ProjectService"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "_projectService",
                        "type": "ProjectService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<ng-container *ngIf=\"isEditing; else readonlyModeTmpl\">\n    <quill-editor class=\"content-editor\"\n                  [modules]=\"editorOptions\"\n                  [formControl]=\"descriptionControl\"\n                  [placeholder]=\"''\"\n                  (onEditorCreated)=\"editorCreated($event)\">\n    </quill-editor>\n\n    <div class=\"pt-3 flex\n      items-center\">\n        <j-button [isWorking]=\"isWorking\"\n                  [className]=\"'btn-primary'\"\n                  class=\"mr-2\"\n                  (click)=\"save()\">\n            Save</j-button>\n        <j-button (click)=\"cancel()\"\n                  [className]=\"'btn-empty'\">\n            Cancel\n        </j-button>\n    </div>\n</ng-container>\n\n<ng-template #readonlyModeTmpl>\n    <div class=\"ql-snow content-readonly\"\n         *ngIf=\"!isEditing\"\n         (click)=\"setEditMode(true)\">\n        <div class=\"ql-editor\"\n             [innerHTML]=\"issue.description || 'Click to add description'\"></div>\n        <div class=\"icon-edit\">\n            <i nz-icon\n               class=\"cursor-pointer\"\n               title=\"Click to edit\"\n               nzType=\"edit\"\n               nzTheme=\"outline\"></i>\n        </div>\n    </div>\n</ng-template>"
        },
        {
            "name": "IssueDetailComponent",
            "id": "component-IssueDetailComponent-af2e17b265d8c797fd0366174172b80c",
            "file": "src/app/project/components/issues/issue-detail/issue-detail.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "issue-detail",
            "styleUrls": [
                "./issue-detail.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./issue-detail.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isShowCloseButton",
                    "line": 16,
                    "type": "boolean"
                },
                {
                    "name": "isShowFullScreenButton",
                    "line": 15,
                    "type": "boolean"
                },
                {
                    "name": "issue",
                    "line": 14,
                    "type": "JIssue"
                }
            ],
            "outputsClass": [
                {
                    "name": "onClosed",
                    "defaultValue": "new EventEmitter()",
                    "line": 17,
                    "type": "EventEmitter"
                },
                {
                    "name": "onDelete",
                    "defaultValue": "new EventEmitter<DeleteIssueModel>()",
                    "line": 19,
                    "type": "EventEmitter"
                },
                {
                    "name": "onOpenIssue",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 18,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "projectQuery",
                    "type": "ProjectQuery",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38
                },
                {
                    "name": "openDeleteIssueModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "openIssuePage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { JIssue } from '@trungk18/interface/issue';\nimport { ProjectQuery } from '@trungk18/project/state/project/project.query';\nimport { NzModalService } from 'ng-zorro-antd/modal';\nimport { IssueDeleteModalComponent } from '../issue-delete-modal/issue-delete-modal.component';\nimport { DeleteIssueModel } from '@trungk18/interface/ui-model/delete-issue-model';\n\n@Component({\n  selector: 'issue-detail',\n  templateUrl: './issue-detail.component.html',\n  styleUrls: ['./issue-detail.component.scss']\n})\nexport class IssueDetailComponent{\n  @Input() issue: JIssue;\n  @Input() isShowFullScreenButton: boolean;\n  @Input() isShowCloseButton: boolean;\n  @Output() onClosed = new EventEmitter();\n  @Output() onOpenIssue = new EventEmitter<string>();\n  @Output() onDelete = new EventEmitter<DeleteIssueModel>();\n\n  constructor(public projectQuery: ProjectQuery, private _modalService: NzModalService) {}\n\n  openDeleteIssueModal() {\n    this._modalService.create({\n      nzContent: IssueDeleteModalComponent,\n      nzClosable: false,\n      nzFooter: null,\n      nzStyle: {\n        top: '140px'\n      },\n      nzComponentParams: {\n        issueId: this.issue.id,\n        onDelete: this.onDelete\n      }\n    });\n  }\n\n  closeModal() {\n    this.onClosed.emit();\n  }\n\n  openIssuePage() {\n    this.onOpenIssue.emit(this.issue.id);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./issue-detail.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "projectQuery",
                        "type": "ProjectQuery"
                    },
                    {
                        "name": "_modalService",
                        "type": "NzModalService"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "projectQuery",
                        "type": "ProjectQuery",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_modalService",
                        "type": "NzModalService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div *ngIf=\"issue; else loaderTmpl\"\n     class=\"w-full h-full\" [class.pl-4]=\"isShowCloseButton\">\n    <div class=\"flex items-center pt-4 text-textDarkest\">\n        <issue-type [issue]=\"issue\"></issue-type>\n        <div class=\"flex-auto\"></div>\n        <a target=\"_blank\"\n           href=\"https://github.com/trungk18/jira-clone-angular/issues/new\">\n            <j-button icon=\"feedback\"\n                      className=\"btn-empty\">\n                Give Feedback\n            </j-button>\n        </a>\n        <j-button icon=\"trash\"\n                  [className]=\"'btn-empty'\"\n                  (click)=\"openDeleteIssueModal()\">\n        </j-button>\n        <j-button *ngIf=\"isShowCloseButton\"\n                  icon=\"expand\"\n                  (click)=\"openIssuePage()\"\n                  [iconSize]=\"24\"\n                  [className]=\"'btn-empty'\">\n        </j-button>\n        <j-button *ngIf=\"isShowCloseButton\"\n                  icon=\"times\"\n                  [iconSize]=\"24\"\n                  (click)=\"closeModal()\"\n                  [className]=\"'btn-empty'\">\n        </j-button>\n    </div>\n    <div class=\"flex w-full flex-wrap pb-16\">\n        <div class=\"sm:w-full md:w-7/12 lg:w-4/6 pr-10\">\n            <issue-title [issue]=\"issue\"></issue-title>\n\n            <div class=\"pt-4 pb-2 text-15 font-medium\">Description</div>\n            <issue-description [issue]=\"issue\"></issue-description>\n\n            <div class=\"pt-4 pb-2 text-15 font-medium\">Comments</div>\n            <issue-comments [issue]=\"issue\"></issue-comments>\n        </div>\n        <div class=\"sm:w-full md:w-5/12 lg:w-2/6 pt-1\">\n            <issue-status [issue]=\"issue\"></issue-status>\n            <issue-reporter [issue]=\"issue\"\n                            [users]=\"projectQuery.users$ | async\">\n            </issue-reporter>\n            <issue-assignees [issue]=\"issue\"\n                             [users]=\"projectQuery.users$ | async\">\n            </issue-assignees>\n            <issue-priority [issue]=\"issue\"></issue-priority>\n\n            <div class=\"mt-3 pt-3 leading-loose border-t border-borderLightest text-textMedium text-13\">\n                <div>\n                    Created - {{ issue.createdAt | date:\"medium\" }}\n                </div>\n                <div>\n                    Updated - {{ issue.updatedAt | date:\"medium\" }}\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<ng-template #loaderTmpl>\n    <issue-loader></issue-loader>\n</ng-template>"
        },
        {
            "name": "IssueLoaderComponent",
            "id": "component-IssueLoaderComponent-5cdf1b78513df9886bdb31662d44e88a",
            "file": "src/app/project/components/issues/issue-loader/issue-loader.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "issue-loader",
            "styleUrls": [
                "./issue-loader.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./issue-loader.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'issue-loader',\n  templateUrl: './issue-loader.component.html',\n  styleUrls: ['./issue-loader.component.scss']\n})\nexport class IssueLoaderComponent {\n  constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./issue-loader.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "templateData": "<div class=\"p-10\">\n    <content-loader [backgroundColor]=\"'#f3f3f3'\" [foregroundColor]=\"'#ecebeb'\" [viewBox]=\"'0 0 940 300'\">\n        <svg:rect x=\"0\" y=\"0\" rx=\"3\" ry=\"3\" width=\"627\" height=\"24\" />\n        <svg:rect x=\"0\" y=\"29\" rx=\"3\" ry=\"3\" width=\"506\" height=\"24\" />\n        <svg:rect x=\"0\" y=\"77\" rx=\"3\" ry=\"3\" width=\"590\" height=\"16\" />\n        <svg:rect x=\"0\" y=\"100\" rx=\"3\" ry=\"3\" width=\"627\" height=\"16\" />\n        <svg:rect x=\"0\" y=\"123\" rx=\"3\" ry=\"3\" width=\"480\" height=\"16\" />\n        <svg:rect x=\"0\" y=\"187\" rx=\"3\" ry=\"3\" width=\"370\" height=\"16\" />\n        <svg:circle cx=\"18\" cy=\"239\" r=\"18\" />\n        <svg:rect x=\"46\" y=\"217\" rx=\"3\" ry=\"3\" width=\"548\" height=\"42\" />\n        <svg:rect x=\"683\" y=\"3\" rx=\"3\" ry=\"3\" width=\"135\" height=\"14\" />\n        <svg:rect x=\"683\" y=\"33\" rx=\"3\" ry=\"3\" width=\"251\" height=\"24\" />\n        <svg:rect x=\"683\" y=\"90\" rx=\"3\" ry=\"3\" width=\"135\" height=\"14\" />\n        <svg:rect x=\"683\" y=\"120\" rx=\"3\" ry=\"3\" width=\"251\" height=\"24\" />\n        <svg:rect x=\"683\" y=\"177\" rx=\"3\" ry=\"3\" width=\"135\" height=\"14\" />\n        <svg:rect x=\"683\" y=\"207\" rx=\"3\" ry=\"3\" width=\"251\" height=\"24\" />\n    </content-loader>\n</div>\n"
        },
        {
            "name": "IssueModalComponent",
            "id": "component-IssueModalComponent-2cd41e1070ddf55abb2e40bcec53a7b5",
            "file": "src/app/project/components/issues/issue-modal/issue-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "issue-modal",
            "styleUrls": [
                "./issue-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./issue-modal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "issue$",
                    "line": 15,
                    "type": "Observable<JIssue>"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "closeModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "deleteIssue",
                    "args": [
                        {
                            "type": "DeleteIssueModel"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "type": "DeleteIssueModel",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openIssuePage",
                    "args": [
                        {
                            "name": "issueId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "jsdoctags": [
                        {
                            "name": "issueId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { JIssue } from '@trungk18/interface/issue';\nimport { ProjectService } from '@trungk18/project/state/project/project.service';\nimport { NzModalRef } from 'ng-zorro-antd/modal';\nimport { Observable } from 'rxjs';\nimport { DeleteIssueModel } from '@trungk18/interface/ui-model/delete-issue-model';\n\n@Component({\n  selector: 'issue-modal',\n  templateUrl: './issue-modal.component.html',\n  styleUrls: ['./issue-modal.component.scss']\n})\nexport class IssueModalComponent {\n  @Input() issue$: Observable<JIssue>;\n\n  constructor(\n    private _modal: NzModalRef,\n    private _router: Router,\n    private _projectService: ProjectService\n  ) {}\n\n  closeModal() {\n    this._modal.close();\n  }\n\n  openIssuePage(issueId: string) {\n    this.closeModal();\n    this._router.navigate(['project', 'issue', issueId]);\n  }\n\n  deleteIssue({ issueId, deleteModalRef }: DeleteIssueModel) {\n    this._projectService.deleteIssue(issueId);\n    deleteModalRef.close();\n    this.closeModal();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".ant-modal {\n    @apply text-textDark;\n}",
                    "styleUrl": "./issue-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_modal",
                        "type": "NzModalRef"
                    },
                    {
                        "name": "_router",
                        "type": "Router"
                    },
                    {
                        "name": "_projectService",
                        "type": "ProjectService"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "_modal",
                        "type": "NzModalRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_projectService",
                        "type": "ProjectService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"px-3\">\n    <issue-detail [issue]=\"issue$ | async\"\n                  [isShowFullScreenButton]=\"true\"\n                  [isShowCloseButton]=\"true\"\n                  (onClosed)=\"closeModal()\"\n                  (onOpenIssue)=\"openIssuePage($event)\"\n                  (onDelete)=\"deleteIssue($event)\">\n    </issue-detail>\n</div>"
        },
        {
            "name": "IssuePriorityComponent",
            "id": "component-IssuePriorityComponent-4b69214673be8d908d508f852bf33774",
            "file": "src/app/project/components/issues/issue-priority/issue-priority.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "issue-priority",
            "styleUrls": [
                "./issue-priority.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./issue-priority.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "issue",
                    "line": 22,
                    "type": "JIssue"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "priorities",
                    "type": "IssuePriorityIcon[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "selectedPriority",
                    "type": "IssuePriority",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "isPrioritySelected",
                    "args": [
                        {
                            "name": "priority",
                            "type": "IssuePriority"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 34,
                    "jsdoctags": [
                        {
                            "name": "priority",
                            "type": "IssuePriority",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "updateIssue",
                    "args": [
                        {
                            "name": "priority",
                            "type": "IssuePriority"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "priority",
                            "type": "IssuePriority",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnChanges, OnInit } from '@angular/core';\nimport { JIssue, IssuePriority } from '@trungk18/interface/issue';\nimport { IssuePriorityIcon } from '@trungk18/interface/issue-priority-icon';\nimport { IssueUtil } from '@trungk18/project/utils/issue';\nimport { ProjectService } from '@trungk18/project/state/project/project.service';\nimport { ProjectConst } from '@trungk18/project/config/const';\n\n@Component({\n  selector: 'issue-priority',\n  templateUrl: './issue-priority.component.html',\n  styleUrls: ['./issue-priority.component.scss']\n})\nexport class IssuePriorityComponent implements OnInit, OnChanges {\n  selectedPriority: IssuePriority;\n\n  get selectedPriorityIcon() {\n    return IssueUtil.getIssuePriorityIcon(this.selectedPriority);\n  }\n\n  priorities: IssuePriorityIcon[];\n\n  @Input() issue: JIssue;\n\n  constructor(private _projectService: ProjectService) {}\n\n  ngOnInit() {\n    this.priorities = ProjectConst.PrioritiesWithIcon;\n  }\n\n  ngOnChanges(): void {\n    this.selectedPriority = this.issue?.priority;\n  }\n\n  isPrioritySelected(priority: IssuePriority) {\n    return priority === this.selectedPriority;\n  }\n\n  updateIssue(priority: IssuePriority) {\n    this.selectedPriority = priority;\n    this._projectService.updateIssue({\n      ...this.issue,\n      priority: this.selectedPriority\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".priority-label {\n  margin-top: -3px;\n}\n",
                    "styleUrl": "./issue-priority.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_projectService",
                        "type": "ProjectService"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "_projectService",
                        "type": "ProjectService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "accessors": {
                "selectedPriorityIcon": {
                    "name": "selectedPriorityIcon",
                    "getSignature": {
                        "name": "selectedPriorityIcon",
                        "type": "",
                        "returnType": "",
                        "line": 16
                    }
                }
            },
            "templateData": "<div class=\"mt-6 mb-1 uppercase text-textMedium text-13 font-bold\">\n    Priority\n</div>\n<j-button className=\"btn-secondary\"\n          nz-dropdown\n          nzTrigger=\"click\"\n          [nzDropdownMenu]=\"menu\">\n    <div class=\"flex items-center\">\n        <svg-icon [name]=\"selectedPriorityIcon.icon\"\n                  [size]=\"20\"\n                  [style.color]=\"selectedPriorityIcon.color\">\n        </svg-icon>\n        <span class=\"ml-3 priority-label\">{{ selectedPriorityIcon.value }}</span>\n    </div>\n</j-button>\n\n<nz-dropdown-menu #menu=\"nzDropdownMenu\">\n    <ul class=\"mt-3\"\n        nz-menu\n        nzNoAnimation>\n        <ng-container *ngFor=\"let option of priorities\">\n            <li nz-menu-item\n                *ngIf=\"!isPrioritySelected(option.value)\"\n                (click)=\"updateIssue(option.value)\">\n                <div class=\"flex items-center\">\n                    <svg-icon [name]=\"option.icon\"\n                              [size]=\"20\"\n                              [style.color]=\"option.color\">\n                    </svg-icon>\n                    <span class=\"ml-3 priority-label font-semibold uppercase text-textMedium text-13\">{{ option.value }}</span>\n                </div>\n            </li>\n        </ng-container>\n    </ul>\n</nz-dropdown-menu>"
        },
        {
            "name": "IssuePrioritySelectComponent",
            "id": "component-IssuePrioritySelectComponent-d2972e2dc089370d8f28aa6261fa1627",
            "file": "src/app/project/components/add-issue-modal/issue-priority-select/issue-priority-select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "issue-priority-select",
            "styleUrls": [
                "./issue-priority-select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./issue-priority-select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "control",
                    "line": 14,
                    "type": "FormControl"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "priorities",
                    "type": "IssuePriorityIcon[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "getPriorityIcon",
                    "args": [
                        {
                            "name": "priority",
                            "type": "IssuePriority"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "priority",
                            "type": "IssuePriority",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { IssuePriorityIcon } from '@trungk18/interface/issue-priority-icon';\nimport { IssueUtil } from '@trungk18/project/utils/issue';\nimport { IssuePriority } from '@trungk18/interface/issue';\nimport { ProjectConst } from '@trungk18/project/config/const';\n\n@Component({\n  selector: 'issue-priority-select',\n  templateUrl: './issue-priority-select.component.html',\n  styleUrls: ['./issue-priority-select.component.scss']\n})\nexport class IssuePrioritySelectComponent {\n  @Input() control: FormControl;\n  priorities: IssuePriorityIcon[];\n\n  constructor() {\n    this.priorities = ProjectConst.PrioritiesWithIcon;\n  }\n\n  getPriorityIcon(priority: IssuePriority) {\n    return IssueUtil.getIssuePriorityIcon(priority);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./issue-priority-select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 15
            },
            "templateData": "<nz-select class=\"w-full\"\n           [formControl]=\"control\"\n           [nzCustomTemplate]=\"defaultTemplate\">\n    <nz-option nzCustomContent\n               *ngFor=\"let priority of priorities\"\n               [nzValue]=\"priority.value\">\n        <div class=\"flex items-center\">\n            <svg-icon [name]=\"priority.icon\"\n                      [size]=\"20\"\n                      [style.color]=\"priority.color\">\n            </svg-icon>\n            <span class=\"ml-3 font-semibold uppercase text-textMedium text-13\">{{ priority.value }}</span>\n        </div>\n    </nz-option>\n</nz-select>\n<ng-template #defaultTemplate\n             let-selected>\n    <div class=\"flex items-center\">\n        <svg-icon [name]=\"getPriorityIcon(selected.nzValue)?.icon\"\n                  [style.color]=\"getPriorityIcon(selected.nzValue)?.color\"\n                  [size]=\"20\">\n        </svg-icon>\n        <span class=\"ml-3 font-semibold uppercase text-textMedium text-13\">{{ selected.nzValue }}</span>\n    </div>\n</ng-template>"
        },
        {
            "name": "IssueReporterComponent",
            "id": "component-IssueReporterComponent-a948e1e2ad94516a52a3a2d0e0a884f7",
            "file": "src/app/project/components/issues/issue-reporter/issue-reporter.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "issue-reporter",
            "styleUrls": [
                "./issue-reporter.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./issue-reporter.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "issue",
                    "line": 14,
                    "type": "JIssue"
                },
                {
                    "name": "users",
                    "line": 15,
                    "type": "JUser[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "reporter",
                    "type": "JUser",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "isUserSelected",
                    "args": [
                        {
                            "name": "user",
                            "type": "JUser"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 27,
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "JUser",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateIssue",
                    "args": [
                        {
                            "name": "user",
                            "type": "JUser"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "JUser",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { UntilDestroy } from '@ngneat/until-destroy';\nimport { JIssue } from '@trungk18/interface/issue';\nimport { JUser } from '@trungk18/interface/user';\nimport { ProjectService } from '@trungk18/project/state/project/project.service';\n\n@Component({\n  selector: 'issue-reporter',\n  templateUrl: './issue-reporter.component.html',\n  styleUrls: ['./issue-reporter.component.scss']\n})\n@UntilDestroy()\nexport class IssueReporterComponent implements OnChanges {\n  @Input() issue: JIssue;\n  @Input() users: JUser[];\n  reporter: JUser;\n\n  constructor(private _projectService: ProjectService) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    const issueChange = changes.issue;\n    if (this.users && issueChange.currentValue !== issueChange.previousValue) {\n      this.reporter = this.users.find((x) => x.id === this.issue.reporterId);\n    }\n  }\n\n  isUserSelected(user: JUser) {\n    return user.id === this.issue.reporterId;\n  }\n\n  updateIssue(user: JUser) {\n    this._projectService.updateIssue({\n      ...this.issue,\n      reporterId: user.id\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".user-name {\n  @apply text-btn;\n  margin-top: -3px;\n}\n",
                    "styleUrl": "./issue-reporter.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_projectService",
                        "type": "ProjectService"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "_projectService",
                        "type": "ProjectService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div class=\"mt-6 mb-1 uppercase text-textMedium text-13 font-bold\">\n    Reporter\n</div>\n<j-button className=\"btn-secondary\"\n          nz-dropdown\n          [nzTrigger]=\"'click'\"\n          [nzDropdownMenu]=\"menu\">\n    <j-user [user]=\"reporter\"></j-user>\n</j-button>\n<nz-dropdown-menu #menu=\"nzDropdownMenu\">\n    <ul class=\"mt-3\"\n        nz-menu\n        nzNoAnimation>\n        <ng-container *ngFor=\"let option of users\">\n            <li nz-menu-item\n                *ngIf=\"!isUserSelected(option)\"\n                (click)=\"updateIssue(option)\">\n                <j-user [user]=\"option\"></j-user>\n            </li>\n        </ng-container>\n    </ul>\n</nz-dropdown-menu>"
        },
        {
            "name": "IssueReporterSelectComponent",
            "id": "component-IssueReporterSelectComponent-9aeeb2df7f4dd5d97af718e798a1d1e5",
            "file": "src/app/project/components/add-issue-modal/issue-reporter-select/issue-reporter-select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "issue-reporter-select",
            "styleUrls": [
                "./issue-reporter-select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./issue-reporter-select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "control",
                    "line": 11,
                    "type": "FormControl"
                },
                {
                    "name": "users",
                    "line": 12,
                    "type": "JUser[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getUser",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 16,
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { JUser } from '@trungk18/interface/user';\n\n@Component({\n  selector: 'issue-reporter-select',\n  templateUrl: './issue-reporter-select.component.html',\n  styleUrls: ['./issue-reporter-select.component.scss']\n})\nexport class IssueReporterSelectComponent {\n  @Input() control: FormControl;\n  @Input() users: JUser[];\n\n  constructor() {}\n\n  getUser(userId: string) {\n    return this.users.find((user) => user.id === userId);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./issue-reporter-select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 12
            },
            "templateData": "<nz-select class=\"w-full\"\n           [formControl]=\"control\"\n           [nzCustomTemplate]=\"selectedReporterTmpl\"\n           nzNoAnimation>\n    <nz-option nzCustomContent\n               *ngFor=\"let user of users\"\n               [nzValue]=\"user.id\">\n        <j-user [user]=\"user\"></j-user>\n    </nz-option>\n</nz-select>\n<ng-template #selectedReporterTmpl\n             let-selected>\n    <j-user [user]=\"getUser(selected.nzValue)\"></j-user>\n</ng-template>"
        },
        {
            "name": "IssueResultComponent",
            "id": "component-IssueResultComponent-a2fe7b70107501d338b4a95d49304800",
            "file": "src/app/project/components/search/issue-result/issue-result.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "issue-result",
            "styleUrls": [
                "./issue-result.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./issue-result.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "issue",
                    "line": 11,
                    "type": "JIssue"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { JIssue } from '@trungk18/interface/issue';\nimport { IssueUtil } from '@trungk18/project/utils/issue';\n\n@Component({\n  selector: 'issue-result',\n  templateUrl: './issue-result.component.html',\n  styleUrls: ['./issue-result.component.scss']\n})\nexport class IssueResultComponent {\n  @Input() issue: JIssue;\n\n  get issueTypeIcon() {\n    return IssueUtil.getIssueTypeIcon(this.issue?.type);\n  }\n\n  constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./issue-result.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 15
            },
            "accessors": {
                "issueTypeIcon": {
                    "name": "issueTypeIcon",
                    "getSignature": {
                        "name": "issueTypeIcon",
                        "type": "",
                        "returnType": "",
                        "line": 13
                    }
                }
            },
            "templateData": "<div class=\"flex items-center py-1 px-3 rounded transition duration-100 cursor-pointer select-none hover:bg-backgroundLight\">\n    <svg-icon [name]=\"issueTypeIcon\"\n              [size]=\"24\"></svg-icon>\n    <div class=\"pl-4\">\n        <div class=\"text-textDark text-15\">\n            {{ issue?.title }}\n        </div>\n        <div class=\"uppercase text-xs text-textMedium\">\n            {{ issue?.type }}-{{issue?.id}}\n        </div>\n    </div>\n</div>"
        },
        {
            "name": "IssueStatusComponent",
            "id": "component-IssueStatusComponent-ea607f15ec592d16f5e9fff2e7116945",
            "file": "src/app/project/components/issues/issue-status/issue-status.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "issue-status",
            "styleUrls": [
                "./issue-status.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./issue-status.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "issue",
                    "line": 12,
                    "type": "JIssue"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "IssueStatusDisplay",
                    "defaultValue": "IssueStatusDisplay",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "issueStatuses",
                    "type": "IssueStatusValueTitle[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "variants",
                    "defaultValue": "{\n    [IssueStatus.BACKLOG]: 'btn-secondary',\n    [IssueStatus.SELECTED]: 'btn-secondary',\n    [IssueStatus.IN_PROGRESS]: 'btn-primary',\n    [IssueStatus.DONE]: 'btn-success'\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "isStatusSelected",
                    "args": [
                        {
                            "name": "status",
                            "type": "IssueStatus"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 44,
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "IssueStatus",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "updateIssue",
                    "args": [
                        {
                            "name": "status",
                            "type": "IssueStatus"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "IssueStatus",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { IssueStatus, IssueStatusDisplay, JIssue } from '@trungk18/interface/issue';\nimport { ProjectService } from '@trungk18/project/state/project/project.service';\nimport { ProjectQuery } from '@trungk18/project/state/project/project.query';\n\n@Component({\n  selector: 'issue-status',\n  templateUrl: './issue-status.component.html',\n  styleUrls: ['./issue-status.component.scss']\n})\nexport class IssueStatusComponent implements OnInit {\n  @Input() issue: JIssue;\n  IssueStatusDisplay = IssueStatusDisplay;\n\n  variants = {\n    [IssueStatus.BACKLOG]: 'btn-secondary',\n    [IssueStatus.SELECTED]: 'btn-secondary',\n    [IssueStatus.IN_PROGRESS]: 'btn-primary',\n    [IssueStatus.DONE]: 'btn-success'\n  };\n\n  issueStatuses: IssueStatusValueTitle[];\n\n  constructor(private _projectService: ProjectService, private _projectQuery: ProjectQuery) {}\n\n  ngOnInit(): void {\n    this.issueStatuses = [\n      new IssueStatusValueTitle(IssueStatus.BACKLOG),\n      new IssueStatusValueTitle(IssueStatus.SELECTED),\n      new IssueStatusValueTitle(IssueStatus.IN_PROGRESS),\n      new IssueStatusValueTitle(IssueStatus.DONE)\n    ];\n  }\n\n  updateIssue(status: IssueStatus) {\n    const newPosition = this._projectQuery.lastIssuePosition(status);\n    this._projectService.updateIssue({\n      ...this.issue,\n      status,\n      listPosition: newPosition + 1\n    });\n  }\n\n  isStatusSelected(status: IssueStatus) {\n    return this.issue.status === status;\n  }\n}\n\nclass IssueStatusValueTitle {\n  value: IssueStatus;\n  label: string;\n  constructor(issueStatus: IssueStatus) {\n    this.value = issueStatus;\n    this.label = IssueStatusDisplay[issueStatus];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./issue-status.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_projectService",
                        "type": "ProjectService"
                    },
                    {
                        "name": "_projectQuery",
                        "type": "ProjectQuery"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "_projectService",
                        "type": "ProjectService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_projectQuery",
                        "type": "ProjectQuery",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"mt-6 mb-1 uppercase text-textMedium text-13 font-bold\">\n    Status\n</div>\n<j-button nz-dropdown\n          nzTrigger=\"click\"\n          [nzDropdownMenu]=\"menu\"\n          [className]=\"variants[issue.status] + ' uppercase text-textMedium text-13'\">\n    {{ IssueStatusDisplay[issue.status] }}\n</j-button>\n\n<nz-dropdown-menu #menu=\"nzDropdownMenu\">\n    <ul nz-menu\n        nzNoAnimation\n        class=\"mt-3\">\n        <ng-container *ngFor=\"let option of issueStatuses\">\n            <li nz-menu-item\n                *ngIf=\"!isStatusSelected(option.value)\"\n                (click)=\"updateIssue(option.value)\">\n                <div class=\"flex items-center\">\n                    <span class=\"ml-3 font-semibold uppercase text-textMedium text-13\">{{ option.label }}</span>\n                </div>\n            </li>\n        </ng-container>\n    </ul>\n</nz-dropdown-menu>"
        },
        {
            "name": "IssueTitleComponent",
            "id": "component-IssueTitleComponent-0f674578ee3a1786eed296eb1b9d47eb",
            "file": "src/app/project/components/issues/issue-title/issue-title.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "issue-title",
            "styleUrls": [
                "./issue-title.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./issue-title.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "issue",
                    "line": 12,
                    "type": "JIssue"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "titleControl",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { JIssue } from '@trungk18/interface/issue';\nimport { ProjectService } from '@trungk18/project/state/project/project.service';\n\n@Component({\n  selector: 'issue-title',\n  templateUrl: './issue-title.component.html',\n  styleUrls: ['./issue-title.component.scss']\n})\nexport class IssueTitleComponent implements OnChanges {\n  @Input() issue: JIssue;\n  titleControl: FormControl;\n\n  constructor(private _projectService: ProjectService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const issueChange = changes.issue;\n    if (issueChange.currentValue !== issueChange.previousValue) {\n      this.titleControl = new FormControl(this.issue.title);\n    }\n  }\n\n  onBlur() {\n    this._projectService.updateIssue({\n      ...this.issue,\n      title: this.titleControl.value\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  @apply flex;\n}\n\n.textarea-inline-control {\n  @apply text-2xl font-medium;\n  margin-left: -8px;\n}\n",
                    "styleUrl": "./issue-title.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_projectService",
                        "type": "ProjectService"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "_projectService",
                        "type": "ProjectService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<textarea class=\"textarea-inline-control\"\n          cdkTextareaAutosize\n          [formControl]=\"titleControl\"\n          [rows]=\"1\"\n          (blur)=\"onBlur()\">\n</textarea>"
        },
        {
            "name": "IssueTypeComponent",
            "id": "component-IssueTypeComponent-8ddf4ee50b783f2577ff1d39af7d1f51",
            "file": "src/app/project/components/issues/issue-type/issue-type.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "issue-type",
            "styleUrls": [
                "./issue-type.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./issue-type.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "issue",
                    "line": 14,
                    "type": "JIssue"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "issueTypes",
                    "type": "IssueTypeWithIcon[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "isTypeSelected",
                    "args": [
                        {
                            "name": "type",
                            "type": "IssueType"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 37,
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "IssueType",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "updateIssue",
                    "args": [
                        {
                            "name": "issueType",
                            "type": "IssueType"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "issueType",
                            "type": "IssueType",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnChanges, OnInit } from '@angular/core';\nimport { IssueType, JIssue } from '@trungk18/interface/issue';\nimport { IssueTypeWithIcon } from '@trungk18/interface/issue-type-icon';\nimport { ProjectService } from '@trungk18/project/state/project/project.service';\nimport { IssueUtil } from '@trungk18/project/utils/issue';\nimport { ProjectConst } from '@trungk18/project/config/const';\n\n@Component({\n  selector: 'issue-type',\n  templateUrl: './issue-type.component.html',\n  styleUrls: ['./issue-type.component.scss']\n})\nexport class IssueTypeComponent implements OnInit, OnChanges {\n  @Input() issue: JIssue;\n\n  get selectedIssueTypeIcon(): string {\n    return IssueUtil.getIssueTypeIcon(this.issue.type);\n  }\n\n  issueTypes: IssueTypeWithIcon[];\n\n  constructor(private _projectService: ProjectService) {\n    this.issueTypes = ProjectConst.IssueTypesWithIcon;\n  }\n\n  ngOnInit() {}\n\n  ngOnChanges(): void {}\n\n  updateIssue(issueType: IssueType) {\n    this._projectService.updateIssue({\n      ...this.issue,\n      type: issueType\n    });\n  }\n\n  isTypeSelected(type: IssueType) {\n    return this.issue.type === type;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".type-dropdown {\n  margin-left: -12px;\n}\n",
                    "styleUrl": "./issue-type.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_projectService",
                        "type": "ProjectService"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "_projectService",
                        "type": "ProjectService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "accessors": {
                "selectedIssueTypeIcon": {
                    "name": "selectedIssueTypeIcon",
                    "getSignature": {
                        "name": "selectedIssueTypeIcon",
                        "type": "string",
                        "returnType": "string",
                        "line": 16
                    }
                }
            },
            "templateData": "<div class=\"type-dropdown\">\n    <j-button nz-dropdown\n              nzTrigger=\"click\"\n              [nzDropdownMenu]=\"menu\"\n              [icon]=\"selectedIssueTypeIcon\"\n              [iconSize]=\"20\"\n              [className]=\"'btn-empty font-semibold uppercase text-textMedium text-13'\">\n        {{ issue.type }}-{{issue.id}}\n    </j-button>\n</div>\n\n<nz-dropdown-menu #menu=\"nzDropdownMenu\">\n    <ul nz-menu\n        nzNoAnimation>\n        <ng-container *ngFor=\"let option of issueTypes\">\n            <li nz-menu-item\n                *ngIf=\"!isTypeSelected(option.value)\"\n                (click)=\"updateIssue(option.value)\">\n                <div class=\"flex items-center\">\n                    <svg-icon [name]=\"option.icon\"\n                              [size]=\"20\">\n                    </svg-icon>\n                    <span class=\"ml-3 font-semibold uppercase text-textMedium text-13\">{{ option.value }}</span>\n                </div>\n            </li>\n        </ng-container>\n    </ul>\n</nz-dropdown-menu>"
        },
        {
            "name": "IssueTypeSelectComponent",
            "id": "component-IssueTypeSelectComponent-490d2f5686656bbeeef33e3dd662483a",
            "file": "src/app/project/components/add-issue-modal/issue-type-select/issue-type-select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "issue-type-select",
            "styleUrls": [
                "./issue-type-select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./issue-type-select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "control",
                    "line": 14,
                    "type": "FormControl"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "issueTypes",
                    "type": "IssueTypeWithIcon[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "getIssueTypeIcon",
                    "args": [
                        {
                            "name": "issueType",
                            "type": "IssueType"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "name": "issueType",
                            "type": "IssueType",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { IssueType } from '@trungk18/interface/issue';\nimport { IssueUtil } from '@trungk18/project/utils/issue';\nimport { IssueTypeWithIcon } from '@trungk18/interface/issue-type-icon';\nimport { FormControl } from '@angular/forms';\nimport { ProjectConst } from '@trungk18/project/config/const';\n\n@Component({\n  selector: 'issue-type-select',\n  templateUrl: './issue-type-select.component.html',\n  styleUrls: ['./issue-type-select.component.scss']\n})\nexport class IssueTypeSelectComponent {\n  @Input() control: FormControl;\n\n  issueTypes: IssueTypeWithIcon[];\n\n  constructor() {\n    this.issueTypes = ProjectConst.IssueTypesWithIcon;\n  }\n\n  getIssueTypeIcon(issueType: IssueType) {\n    return IssueUtil.getIssueTypeIcon(issueType);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./issue-type-select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 16
            },
            "templateData": "<nz-select class=\"w-full\"\n           [formControl]=\"control\"\n           [nzCustomTemplate]=\"defaultTemplate\">\n    <nz-option nzCustomContent\n               *ngFor=\"let type of issueTypes\"\n               [nzValue]=\"type.value\">\n        <div class=\"flex items-center\">\n            <svg-icon [name]=\"type.icon\"\n                      [size]=\"20\">\n            </svg-icon>\n            <span class=\"ml-3 font-semibold uppercase text-textMedium text-13\">{{ type.value }}</span>\n        </div>\n    </nz-option>\n</nz-select>\n<ng-template #defaultTemplate\n             let-selected>\n    <div class=\"flex items-center\">\n        <svg-icon [name]=\"getIssueTypeIcon(selected.nzValue)\"\n                  [size]=\"20\">\n        </svg-icon>\n        <span class=\"ml-3 font-semibold uppercase text-textMedium text-13\">{{ selected.nzValue }}</span>\n    </div>\n</ng-template>"
        },
        {
            "name": "NavbarLeftComponent",
            "id": "component-NavbarLeftComponent-122e640c94ca53b1ba08d397d46172a0",
            "file": "src/app/project/components/navigation/navbar-left/navbar-left.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-navbar-left",
            "styleUrls": [
                "./navbar-left.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./navbar-left.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authQuery",
                    "type": "AuthQuery",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "items",
                    "type": "NavItem[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "openCreateIssueModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "openSearchDrawler",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { AuthQuery } from '@trungk18/project/auth/auth.query';\nimport { NzDrawerService } from 'ng-zorro-antd/drawer';\nimport { SearchDrawerComponent } from '../../search/search-drawer/search-drawer.component';\nimport { NzModalService } from 'ng-zorro-antd/modal';\nimport { AddIssueModalComponent } from '../../add-issue-modal/add-issue-modal.component';\n\n@Component({\n  selector: 'app-navbar-left',\n  templateUrl: './navbar-left.component.html',\n  styleUrls: ['./navbar-left.component.scss']\n})\nexport class NavbarLeftComponent implements OnInit {\n  items: NavItem[];\n  constructor(\n    public authQuery: AuthQuery,\n    private _drawerService: NzDrawerService,\n    private _modalService: NzModalService\n  ) {}\n\n  ngOnInit(): void {\n    this.items = [\n      new NavItem('search', 'Search issues', this.openSearchDrawler.bind(this)),\n      new NavItem('plus', 'Create issue', this.openCreateIssueModal.bind(this))\n    ];\n  }\n\n  openCreateIssueModal() {\n    this._modalService.create({\n      nzContent: AddIssueModalComponent,\n      nzClosable: false,\n      nzFooter: null,\n      nzWidth: 700\n    });\n  }\n\n  openSearchDrawler() {\n    this._drawerService.create({\n      nzContent: SearchDrawerComponent,\n      nzTitle: null,\n      nzPlacement: 'left',\n      nzClosable: false,\n      nzWidth: 500\n    });\n  }\n}\n\nclass NavItem {\n  constructor(public icon: string, public tooltip: string, public handler: Handler) {}\n}\n\ntype Handler = () => void;\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "$light-blue: rgb(28, 99, 206);\n\n.navbarLeft-content {\n  @apply h-screen w-navbarLeft pt-6 pb-5 flex flex-col bg-primary flex-shrink-0;\n}\n\n.logoLink {\n  @apply relative pb-2 flex items-center justify-center;\n}\n\n.item {\n  @apply relative w-full flex items-center justify-center;\n  min-height: 42px;\n\n  .user-profile-photo {\n    width: 26px;\n  }\n}\n\n.itemIcon {\n  @apply w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 select-none transition-colors duration-100 cursor-pointer;\n}\n\n.itemIcon:hover {\n  background: $light-blue;\n}\n\n.about-popover {\n  max-width: 270px;\n}\n",
                    "styleUrl": "./navbar-left.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "authQuery",
                        "type": "AuthQuery"
                    },
                    {
                        "name": "_drawerService",
                        "type": "NzDrawerService"
                    },
                    {
                        "name": "_modalService",
                        "type": "NzModalService"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "authQuery",
                        "type": "AuthQuery",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_drawerService",
                        "type": "NzDrawerService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_modalService",
                        "type": "NzModalService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<aside class=\"navbarLeft\">\n    <div class=\"navbarLeft-content\">\n        <div class=\"logoLink\"\n             title=\"Angular Jira Clone by trungk18\">\n            <svg class=\"w-8 h-8 text-textLogo\"\n                 viewBox=\"0 0 32 32\"\n                 xmlns=\"http://www.w3.org/2000/svg\"\n                 aria-hidden=\"true\">\n                <defs>\n                    <linearGradient x1=\"108.695%\"\n                                    x2=\"12.439%\"\n                                    y1=\"-14.936%\"\n                                    y2=\"45.215%\"\n                                    id=\"uid11-1\">\n                        <stop stop-color=\"#DEEBFF\"\n                              stop-opacity=\"0.4\"\n                              offset=\"0%\"></stop>\n                        <stop stop-color=\"#DEEBFF\"\n                              offset=\"100%\"></stop>\n                    </linearGradient>\n                    <linearGradient x1=\"0%\"\n                                    x2=\"91.029%\"\n                                    y1=\"118.55%\"\n                                    y2=\"63.971%\"\n                                    id=\"uid11-2\">\n                        <stop stop-color=\"#DEEBFF\"\n                              stop-opacity=\"0.4\"\n                              offset=\"0%\"></stop>\n                        <stop stop-color=\"#DEEBFF\"\n                              offset=\"100%\"></stop>\n                    </linearGradient>\n                </defs>\n                <g>\n                    <path d=\"M15.967 29.362a6.675 6.675 0 0 0 0-9.442l-8.699-8.671-3.957 3.957a1.062 1.062 0 0 0 0 1.5l12.656 12.656zm12.656-14.156L15.967 2.55l-.039.039a6.675 6.675 0 0 0 .028 9.41l8.706 8.667 3.96-3.96a1.062 1.062 0 0 0 0-1.5z\"\n                          fill=\"currentColor\"></path>\n                    <path d=\"M15.967 11.992a6.675 6.675 0 0 1-.028-9.41L6.91 11.606l4.72 4.721 4.336-4.335z\"\n                          fill=\"url(#uid11-1\"></path>\n                    <path d=\"M20.295 15.591l-4.328 4.329a6.675 6.675 0 0 1 0 9.442l9.05-9.05-4.722-4.72z\"\n                          fill=\"url(#uid11-2\"></path>\n                </g>\n            </svg>\n        </div>\n\n        <div *ngFor=\"let item of items\"\n             class=\"item\">\n            <div (click)=\"item.handler()\"\n                 nz-tooltip\n                 [nzTooltipTitle]=\"item.tooltip\"\n                 nzTooltipPlacement=\"right\"\n                 class=\"itemIcon\">\n                <i class=\"text-xl text-white\"\n                   nz-icon\n                   [nzType]=\"item.icon\"\n                   nzTheme=\"outline\"></i>\n            </div>\n        </div>\n        <div class=\"flex-auto\"></div>\n        <div class=\"item\"\n             *ngIf=\"authQuery.user$ | async as user\">\n            <div nz-tooltip\n                 [nzTooltipTitle]=\"user.name\"\n                 nzTooltipPlacement=\"right\"\n                 class=\"itemIcon\">\n                <j-avatar class=\"flex\"\n                          [avatarUrl]=\"user.avatarUrl\"\n                          [size]=\"26\">\n                </j-avatar>\n            </div>\n        </div>\n        <div class=\"item\">\n            <a nz-popover\n               nzPopoverPlacement=\"rightBottom\"\n               [nzPopoverContent]=\"aboutPopoverTmpl\"\n               nzPopoverTrigger=\"click\">\n                <div nz-tooltip\n                     nzTooltipTitle=\"About\"\n                     nzTooltipPlacement=\"right\"\n                     class=\"itemIcon\">\n                    <i class=\"text-xl text-white\"\n                       nz-icon\n                       nzType=\"question-circle\"\n                       nzTheme=\"fill\">\n                    </i>\n                </div>\n            </a>\n        </div>\n    </div>\n</aside>\n\n<ng-template #aboutPopoverTmpl>\n    <div class=\"about-popover\">\n        <p class=\"mb-2\">This is a <strong>simplified</strong> Jira clone built with Angular, Akita and ng-zorro</p>\n        <p class=\"mb-2\">Thanks a bunch for stopping by and supporting me!</p>\n        <p class=\"mb-3\">Reach out to me via <a class=\"font-semibold\"\n               href=\"email:trungk18@gmail.com\">trungk18@gmail.com</a></p>\n        <a href=\"https://trungk18.com/\"\n           target=\"_blank\">\n            <j-button className=\"btn-primary\">Visit My Blog</j-button>\n        </a>\n    </div>\n</ng-template>"
        },
        {
            "name": "NavigationComponent",
            "id": "component-NavigationComponent-56e4b5f030b2fb1e9c0944326d24ad0b",
            "file": "src/app/project/components/navigation/navigation/navigation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-navigation",
            "styleUrls": [
                "./navigation.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./navigation.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "expanded",
                    "line": 9,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "manualToggle",
                    "defaultValue": "new EventEmitter()",
                    "line": 10,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'app-navigation',\n  templateUrl: './navigation.component.html',\n  styleUrls: ['./navigation.component.scss']\n})\nexport class NavigationComponent {\n  @Input() expanded: boolean;\n  @Output() manualToggle = new EventEmitter();\n  constructor() {}\n\n  toggle() {\n    this.manualToggle.emit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".navigation {\n  display: flex;\n}\n",
                    "styleUrl": "./navigation.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 10
            },
            "templateData": "<div class=\"navigation\">\n    <div class=\"flex flex-row overflow-hidden h-full\">\n        <app-navbar-left></app-navbar-left>\n        <app-sidebar [expanded]=\"expanded\"></app-sidebar>\n    </div>\n    <app-resizer (click)=\"toggle()\" [expanded]=\"expanded\"></app-resizer>\n</div>"
        },
        {
            "name": "ProjectComponent",
            "id": "component-ProjectComponent-ccd442e5fbc99afb1462f0da10d64bd1",
            "file": "src/app/project/project.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-project",
            "styleUrls": [
                "./project.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./project.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "expanded",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "handleResize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "manualToggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ProjectService } from './state/project/project.service';\nimport { AuthService } from './auth/auth.service';\nimport { LoginPayload } from '@trungk18/project/auth/loginPayload';\n\n@Component({\n  selector: 'app-project',\n  templateUrl: './project.component.html',\n  styleUrls: ['./project.component.scss']\n})\nexport class ProjectComponent implements OnInit {\n  expanded: boolean;\n  constructor(private _projectService: ProjectService, private _authService: AuthService) {\n    this.expanded = true;\n  }\n\n  ngOnInit(): void {\n    this._authService.login(new LoginPayload());\n    this._projectService.getProject();\n    this.handleResize();\n  }\n\n  handleResize() {\n    const match = window.matchMedia('(min-width: 1024px)');\n    match.addEventListener('change', (e) => {\n      console.log(e);\n      this.expanded = e.matches;\n    });\n  }\n\n  manualToggle() {\n    this.expanded = !this.expanded;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#content {\n  flex: 1;\n  min-width: 0;\n  z-index: 0;\n  overflow: auto;\n  will-change: padding-left;\n  transition: padding-left 300ms cubic-bezier(0.2, 0, 0, 1) 0s;\n}\n",
                    "styleUrl": "./project.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_projectService",
                        "type": "ProjectService"
                    },
                    {
                        "name": "_authService",
                        "type": "AuthService"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "_projectService",
                        "type": "ProjectService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"w-full h-full flex\">\n    <app-navigation [expanded]=\"expanded\" (manualToggle)=\"manualToggle()\"></app-navigation>\n    <div id=\"content\">\n        <router-outlet></router-outlet>\n    </div>\n</div>\n<svg-definitions></svg-definitions>"
        },
        {
            "name": "ResizerComponent",
            "id": "component-ResizerComponent-b85b41172e19188a46a1c858719df4b3",
            "file": "src/app/project/components/navigation/resizer/resizer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-resizer",
            "styleUrls": [
                "./resizer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./resizer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "expanded",
                    "line": 9,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-resizer',\n  templateUrl: './resizer.component.html',\n  styleUrls: ['./resizer.component.scss']\n})\nexport class ResizerComponent {\n  @Input() expanded: boolean;\n\n  get icon() {\n    return this.expanded ? 'chevron-left' : 'chevron-right';\n  }\n  constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".sizer-wrap {\n  bottom: 0;\n  position: absolute;\n  top: 0;\n  transform: translateZ(0);\n  width: 24px;\n  z-index: 3;\n}\n\n.sizer {\n  cursor: ew-resize;\n  height: 100%;\n  left: -4px;\n  position: relative;\n  width: 24px;\n}\n\n.strip {\n  background: linear-gradient(\n    to left,\n    rgba(0, 0, 0, 0.2) 0px,\n    rgba(0, 0, 0, 0.2) 1px,\n    rgba(0, 0, 0, 0.1) 1px,\n    rgba(0, 0, 0, 0) 100%\n  );\n  bottom: 0;\n  left: -3px;\n  opacity: 0.5;\n  pointer-events: none;\n  position: absolute;\n  top: 0;\n  transition-duration: 0.22s;\n  transition-property: left, opacity, width;\n  transition-timing-function: cubic-bezier(0.2, 0, 0, 1);\n  width: 3px;\n}\n.line {\n  background-color: #4c9aff;\n  opacity: 0;\n  height: 100%;\n  left: 3px;\n  position: absolute;\n  width: 2px;\n  transition: opacity 200ms ease 0s;\n}\n\n.sizer-wrap:hover {\n  .sizer .line {\n    opacity: 1;\n  }\n  .btn .icon {\n    color: #4c9aff;\n  }\n}\n\n.btn {\n  box-shadow: rgba(9, 30, 66, 0.08) 0px 0px 0px 1px, rgba(9, 30, 66, 0.08) 0px 2px 4px 1px;\n  color: rgb(107, 119, 140);\n  cursor: pointer;\n  height: 24px;\n  opacity: 1;\n  position: absolute;\n  top: 32px;\n  transform: translate(-50%);\n  width: 24px;\n  background: 0px center white;\n  border-width: 0px;\n  border-style: initial;\n  border-color: initial;\n  border-image: initial;\n  border-radius: 50%;\n  outline: 0px;\n  padding: 0px;\n  transition: background-color 100ms linear 0s, color 100ms linear 0s,\n    opacity 300ms cubic-bezier(0.2, 0, 0, 1) 0s, transform 300ms cubic-bezier(0.2, 0, 0, 1) 0s;\n  &:hover {\n    background: rgb(67, 154, 255);\n    .icon {\n      color: white !important;\n    }\n  }\n}\n\n.overlay {\n  position: absolute;\n  left: -8px;\n  right: -12px;\n  bottom: -8px;\n  top: -8px;\n}\n",
                    "styleUrl": "./resizer.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 13
            },
            "accessors": {
                "icon": {
                    "name": "icon",
                    "getSignature": {
                        "name": "icon",
                        "type": "",
                        "returnType": "",
                        "line": 11
                    }
                }
            },
            "templateData": "<div class=\"sizer-wrap\">\n    <div class=\"strip\"></div>\n    <div class=\"sizer\">\n        <div class=\"line\">\n\n        </div>\n    </div>\n    <button class=\"btn\">\n        <div class=\"overlay\"></div>\n        <span class=\"cursor-pointer fill-current text-white flex-shrink-0 leading-none\">\n            <svg-icon [name]=\"icon\"\n                      [size]=\"24\"\n                      class=\"icon text-textMedium\">\n            </svg-icon>\n        </span>\n    </button>\n</div>"
        },
        {
            "name": "SearchDrawerComponent",
            "id": "component-SearchDrawerComponent-83c28c6acc78dde8ebb9d61428d496a9",
            "file": "src/app/project/components/search/search-drawer/search-drawer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "search-drawer",
            "styleUrls": [
                "./search-drawer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./search-drawer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "recentIssues$",
                    "type": "Observable<JIssue[]>",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "results$",
                    "type": "Observable<JIssue[]>",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "searchControl",
                    "defaultValue": "new FormControl('')",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "closeDrawer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34
                },
                {
                    "name": "openIssueModal",
                    "args": [
                        {
                            "name": "issue",
                            "type": "JIssue"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "issue",
                            "type": "JIssue",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { JIssue } from '@trungk18/interface/issue';\nimport { ProjectQuery } from '@trungk18/project/state/project/project.query';\nimport { IssueUtil } from '@trungk18/project/utils/issue';\nimport { NzDrawerRef } from 'ng-zorro-antd/drawer';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, debounceTime, startWith } from 'rxjs/operators';\nimport { NzModalService } from 'ng-zorro-antd/modal';\nimport { IssueModalComponent } from '../../issues/issue-modal/issue-modal.component';\n\n@Component({\n  selector: 'search-drawer',\n  templateUrl: './search-drawer.component.html',\n  styleUrls: ['./search-drawer.component.scss']\n})\n@UntilDestroy()\nexport class SearchDrawerComponent implements OnInit {\n  searchControl: FormControl = new FormControl('');\n  results$: Observable<JIssue[]>;\n  recentIssues$: Observable<JIssue[]>;\n\n  get hasSearchTermInput(): boolean {\n    return !!this.searchControl.value;\n  }\n\n  constructor(\n    private _projectQuery: ProjectQuery,\n    private _drawer: NzDrawerRef,\n    private _modalService: NzModalService\n  ) {}\n\n  ngOnInit(): void {\n    const search$ = this.searchControl.valueChanges.pipe(debounceTime(50), startWith(this.searchControl.value));\n    this.recentIssues$ = this._projectQuery.issues$.pipe(map((issues) => issues.slice(0, 5)));\n    this.results$ = combineLatest([search$, this._projectQuery.issues$]).pipe(\n      untilDestroyed(this),\n      switchMap(([term, issues]) => {\n        const matchIssues = issues.filter((issue) => {\n          const foundInTitle = IssueUtil.searchString(issue.title, term);\n          const foundInDescription = IssueUtil.searchString(issue.description, term);\n          return foundInTitle || foundInDescription;\n        });\n        return of(matchIssues);\n      })\n    );\n  }\n\n  closeDrawer() {\n    this._drawer.close();\n  }\n\n  openIssueModal(issue: JIssue) {\n    this._modalService.create({\n      nzContent: IssueModalComponent,\n      nzWidth: 1040,\n      nzClosable: false,\n      nzFooter: null,\n      nzComponentParams: {\n        issue$: this._projectQuery.issueById$(issue.id)\n      }\n    });\n    this.closeDrawer();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".section-title {\n  @apply text-textMedium font-bold text-xs uppercase pb-3;\n}\n",
                    "styleUrl": "./search-drawer.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_projectQuery",
                        "type": "ProjectQuery"
                    },
                    {
                        "name": "_drawer",
                        "type": "NzDrawerRef"
                    },
                    {
                        "name": "_modalService",
                        "type": "NzModalService"
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "_projectQuery",
                        "type": "ProjectQuery",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_drawer",
                        "type": "NzDrawerRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_modalService",
                        "type": "NzModalService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "hasSearchTermInput": {
                    "name": "hasSearchTermInput",
                    "getSignature": {
                        "name": "hasSearchTermInput",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 24
                    }
                }
            },
            "templateData": "<div class=\"mb-10\">\n    <j-input [control]=\"searchControl\"\n             containerClassName=\"flat text-textMedium\"\n             icon=\"search\"\n             [iconSize]=\"26\"\n             placeholder=\"Search issues by summary, description...\">\n    </j-input>\n</div>\n\n<ng-container *ngIf=\"hasSearchTermInput; else noSearchInputTmpl\">\n    <ng-container *ngIf=\"results$ | async as results\">\n        <ng-container *ngIf=\"results?.length; else noResultTmpl\">\n            <div class=\"section-title\">Issues Result</div>\n            <issue-result *ngFor=\"let issue of results\"\n                          (click)=\"openIssueModal(issue)\"\n                          [issue]=\"issue\"></issue-result>\n        </ng-container>\n    </ng-container>\n</ng-container>\n\n<ng-template #noSearchInputTmpl>\n    <ng-container *ngIf=\"recentIssues$ | async as recentIssues\">\n        <ng-container *ngIf=\"recentIssues?.length; else noResultTmpl\">\n            <div class=\"section-title\">Recent Issues</div>\n            <issue-result *ngFor=\"let issue of recentIssues\"\n                          (click)=\"openIssueModal(issue)\"\n                          [issue]=\"issue\"></issue-result>\n        </ng-container>\n    </ng-container>\n</ng-template>\n\n<ng-template #noResultTmpl>\n    <div class=\"pt-10 flex flex-col justify-center items-center\">\n        <svg-icon [name]=\"'no-result'\"\n                  [size]=\"125\"></svg-icon>\n        <div class=\"pt-8 font-medium text-xl\">\n            We couldn't find anything matching your search\n        </div>\n        <div class=\"pt-2 text-15\">Try again with a different term.</div>\n    </div>\n</ng-template>"
        },
        {
            "name": "SettingsComponent",
            "id": "component-SettingsComponent-41fd602bddca202a813f947a0173b41f",
            "file": "src/app/project/pages/settings/settings.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./settings.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./settings.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "categories",
                    "type": "ProjectCategory[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "project",
                    "type": "JProject",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "projectForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75
                },
                {
                    "name": "initForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39
                },
                {
                    "name": "submitForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65
                },
                {
                    "name": "updateForm",
                    "args": [
                        {
                            "name": "project",
                            "type": "JProject"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "JProject",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ProjectConst } from '@trungk18/project/config/const';\nimport { JProject, ProjectCategory } from '@trungk18/interface/project';\nimport { ProjectQuery } from '@trungk18/project/state/project/project.query';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { FormGroup, FormBuilder } from '@angular/forms';\nimport { ProjectService } from '@trungk18/project/state/project/project.service';\nimport { Router } from '@angular/router';\nimport { NzNotificationService } from 'ng-zorro-antd/notification';\nimport { NoWhitespaceValidator } from '@trungk18/core/validators/no-whitespace.validator';\n\n@Component({\n  templateUrl: './settings.component.html',\n  styleUrls: ['./settings.component.scss']\n})\n@UntilDestroy()\nexport class SettingsComponent implements OnInit {\n  project: JProject;\n  projectForm: FormGroup;\n  categories: ProjectCategory[];\n  get breadcrumbs(): string[] {\n    return [ProjectConst.Projects, this.project?.name, 'Settings'];\n  }\n\n  constructor(\n    private _projectQuery: ProjectQuery,\n    private _projectService: ProjectService,\n    private _notification: NzNotificationService,\n    private _fb: FormBuilder,\n    private _router: Router\n  ) {\n    this.categories = [\n      ProjectCategory.BUSINESS,\n      ProjectCategory.MARKETING,\n      ProjectCategory.SOFTWARE\n    ];\n  }\n\n  ngOnInit(): void {\n    this.initForm();\n    this._projectQuery.all$.pipe(untilDestroyed(this)).subscribe((project) => {\n      this.project = project;\n      this.updateForm(project);\n    });\n  }\n\n  initForm() {\n    this.projectForm = this._fb.group({\n      name: ['', NoWhitespaceValidator()],\n      url: [''],\n      description: [''],\n      category: [ProjectCategory.SOFTWARE]\n    });\n  }\n\n  updateForm(project: JProject) {\n    this.projectForm.patchValue({\n      name: project.name,\n      url: project.url,\n      description: project.description,\n      category: project.category\n    });\n  }\n\n  submitForm() {\n    const formValue: Partial<JProject> = this.projectForm.getRawValue();\n    this._projectService.updateProject(formValue);\n    this._notification.create(\n      'success',\n      'Changes have been saved successfully.',\n      ''\n    );\n  }\n\n  cancel() {\n    this._router.navigate(['/']);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".project-form {\n  max-width: 640px;\n}\n",
                    "styleUrl": "./settings.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_projectQuery",
                        "type": "ProjectQuery"
                    },
                    {
                        "name": "_projectService",
                        "type": "ProjectService"
                    },
                    {
                        "name": "_notification",
                        "type": "NzNotificationService"
                    },
                    {
                        "name": "_fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "_router",
                        "type": "Router"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "_projectQuery",
                        "type": "ProjectQuery",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_projectService",
                        "type": "ProjectService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_notification",
                        "type": "NzNotificationService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "breadcrumbs": {
                    "name": "breadcrumbs",
                    "getSignature": {
                        "name": "breadcrumbs",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 21
                    }
                }
            },
            "templateData": "<div class=\"pr-6 py-8 pl-8 h-full w-full flex flex-col\">\n    <breadcrumbs [items]=\"breadcrumbs\"></breadcrumbs>\n    <div class=\"mt-3 mb-6 text-2xl font-medium\">Project Settings</div>\n    <form class=\"project-form\"\n          (ngSubmit)=\"submitForm()\"\n          [formGroup]=\"projectForm\">\n        <div class=\"form-group\">\n            <label class=\"label\">\n                Name\n            </label>\n            <input class=\"form-input\"\n                   placeholder=\"Project Name\"\n                   formControlName=\"name\"\n                   jAutofocus />\n        </div>\n        <div class=\"form-group mt-3\">\n            <label class=\"label\">\n                URL\n            </label>\n            <input class=\"form-input\"\n                   placeholder=\"Project URL\"\n                   formControlName=\"url\" />\n        </div>\n        <div class=\"form-group mt-3\">\n            <label class=\"label\">\n                Category\n            </label>\n            <select class=\"form-input\"\n                    formControlName=\"category\">\n                <option *ngFor=\"let category of categories\">\n                    {{ category }}\n                </option>\n            </select>\n        </div>\n        <div class=\"form-group mt-3\">\n            <label class=\"label\">\n                Description\n            </label>\n            <textarea class=\"form-input\"\n                      placeholder=\"Project Description\"\n                      formControlName=\"description\">\n            </textarea>\n        </div>\n        <div class=\"form-group mt-3\">\n            <j-button className=\"btn-primary mr-2\"\n                      type=\"submit\"\n                      [disabled]=\"projectForm.invalid\">\n                Save\n            </j-button>\n            <j-button className=\"btn-empty\"\n                      (click)=\"cancel()\">\n                Cancel\n            </j-button>\n        </div>\n    </form>\n</div>"
        },
        {
            "name": "SidebarComponent",
            "id": "component-SidebarComponent-7b29770947a4cc5fb7bbfcd387a5efca",
            "file": "src/app/project/components/navigation/sidebar/sidebar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sidebar",
            "styleUrls": [
                "./sidebar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sidebar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "expanded",
                    "line": 15,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "project",
                    "type": "JProject",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "sideBarLinks",
                    "type": "SideBarLink[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\nimport { JProject } from '@trungk18/interface/project';\nimport { SideBarLink } from '@trungk18/interface/ui-model/nav-link';\nimport { SideBarLinks } from '@trungk18/project/config/sidebar';\nimport { ProjectQuery } from '@trungk18/project/state/project/project.query';\n\n@Component({\n  selector: 'app-sidebar',\n  templateUrl: './sidebar.component.html',\n  styleUrls: ['./sidebar.component.scss']\n})\n@UntilDestroy()\nexport class SidebarComponent implements OnInit {\n  @Input() expanded: boolean;\n\n  get sidebarWidth(): number {\n    return this.expanded ? 240 : 15;\n  }\n\n  project: JProject;\n  sideBarLinks: SideBarLink[];\n\n  constructor(private _projectQuery: ProjectQuery) {\n    this._projectQuery.all$.pipe(untilDestroyed(this)).subscribe((project) => {\n      this.project = project;\n    });\n  }\n\n  ngOnInit(): void {\n    this.sideBarLinks = SideBarLinks;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".sidebar {\n  will-change: width;\n  transition: width 300ms cubic-bezier(0.2, 0, 0, 1) 0s;\n  @apply h-full relative;\n}\n\n.sidebar-content {\n  height: 100%;\n  left: 0px;\n  min-width: 240px;\n  overflow-x: hidden;\n  position: absolute;\n  top: 0px;\n  width: 100%;\n  @apply px-4 bg-backgroundLightest;\n}\n\n.not-implemented {\n  top: 7px;\n  left: 40px;\n  width: 140px;\n  padding: 5px 0 5px 8px;\n  @apply bg-backgroundMedium text-textDark inline-block absolute rounded-sm uppercase opacity-0 text-xs font-bold;\n}\n\n.link {\n  @apply flex items-center relative py-2 px-3 rounded-sm text-textDarkest;\n\n  &:hover .not-implemented {\n    @apply opacity-100;\n  }\n}\n\n.active {\n  @apply text-textLink bg-backgroundLight;\n}\n\n.allowed:hover {\n  @apply bg-backgroundLight;\n}\n\n.not-allowed {\n  cursor: not-allowed;\n}\n\n.divider {\n  @apply mt-4 pt-4 border-t border-borderLight;\n}\n",
                    "styleUrl": "./sidebar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "_projectQuery",
                        "type": "ProjectQuery"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "_projectQuery",
                        "type": "ProjectQuery",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "sidebarWidth": {
                    "name": "sidebarWidth",
                    "getSignature": {
                        "name": "sidebarWidth",
                        "type": "number",
                        "returnType": "number",
                        "line": 17
                    }
                }
            },
            "templateData": "<div [style.width.px]=\"sidebarWidth\"\n     class=\"sidebar\">\n    <div class=\"sidebar-content\">\n        <div class=\"flex py-6 px-1\">\n            <j-avatar avatarUrl=\"https://res.cloudinary.com/dvujyxh7e/image/upload/c_scale,w_256/v1593097745/angular-vietnam-transparent_iwfwxa.png\"\n                      [name]=\"'Project'\"\n                      [rounded]=\"false\"\n                      [size]=\"45\"\n                      title=\"Angular Vietnam\">\n            </j-avatar>\n            <div class=\"pl-2\">\n                <div class=\"text-textDark text-15 font-medium\">\n                    {{ project.name }}\n                </div>\n                <div class=\"text-textMedium text-13\">\n                    {{ project.category }} Project\n                </div>\n            </div>\n        </div>\n\n        <div *ngFor=\"let link of sideBarLinks; let idx = index\">\n            <a *ngIf=\"link.url\"\n               :is=\"link.to ? 'router-link' : 'div'\"\n               [routerLink]=\"link.url\"\n               routerLinkActive=\"active\"\n               tag=\"a\"\n               class=\"link allowed\">\n\n                <svg-icon class=\"mr-4\"\n                          [name]=\"link.icon\"\n                          [size]=\"24\">\n                </svg-icon>\n\n                <div class=\"text-15 pt-px\">{{ link.name }}</div>\n            </a>\n            <div *ngIf=\"!link.url\"\n                 class=\"link not-allowed\">\n\n                <svg-icon class=\"mr-4\"\n                          [name]=\"link.icon\"\n                          [size]=\"24\">\n                </svg-icon>\n\n                <div class=\"text-15 pt-px\">{{ link.name }}</div>\n                <div class=\"not-implemented\">\n                    Not implemented\n                </div>\n            </div>\n\n            <div *ngIf=\"idx === 1\"\n                 class=\"divider\"></div>\n        </div>\n    </div>\n</div>"
        },
        {
            "name": "SnowComponent",
            "id": "component-SnowComponent-50ee76b5bad7b7675aa9fe5dc93a4a75",
            "file": "src/app/core/snow/snow.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "j-snow",
            "styleUrls": [
                "./snow.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./snow.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'j-snow',\n  templateUrl: './snow.component.html',\n  styleUrls: ['./snow.component.scss']\n})\nexport class SnowComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "//https://codepen.io/alphardex/pen/dyPorwJ\n\n@function random_range($min, $max) {\n  $rand: random();\n  $random_range: $min + floor($rand * (($max - $min) + 1));\n  @return $random_range;\n}\n\n.snow {\n  $total: 200;\n  position: absolute;\n  width: 20px;\n  height: 20px;  \n  font-size: 20px;\n  border-radius: 50%;\n  pointer-events: none;\n  color: #a3b1bc;\n\n  @for $i from 1 through $total {\n    $random-x: random(1000000) * 0.0001vw;\n    $random-offset: random_range(-100000, 100000) * 0.0001vw;\n    $random-x-end: $random-x + $random-offset;\n    $random-x-end-yoyo: $random-x + ($random-offset / 2);\n    $random-yoyo-time: random_range(30000, 80000) / 100000;\n    $random-yoyo-y: $random-yoyo-time * 100vh;\n    $random-scale: random(10000) * 0.0001;\n    $fall-duration: random_range(10, 30) * 1s;\n    $fall-delay: random(30) * -1s;\n\n    &:nth-child(#{$i}) {\n      opacity: random(8000) * 0.0001;\n      transform: translate($random-x, -10px) scale($random-scale);\n      animation: fall-#{$i} $fall-duration $fall-delay linear infinite;\n    }\n\n    @keyframes fall-#{$i} {\n      #{percentage($random-yoyo-time)} {\n        transform: translate($random-x-end, $random-yoyo-y) scale($random-scale);\n      }\n      \n      to {\n        transform: translate($random-x-end-yoyo, 100vh) scale($random-scale);\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./snow.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>\n<div class=\"snow\">❅</div>"
        },
        {
            "name": "SvgDefinitionsComponent",
            "id": "component-SvgDefinitionsComponent-7064ee768bf7535caa16ee903243b51f",
            "file": "src/app/jira-control/svg-definitions/svg-definitions.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "svg-definitions",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./svg-definitions.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'svg-definitions',\n  templateUrl: './svg-definitions.component.html'\n})\nexport class SvgDefinitionsComponent {\n  constructor() {}\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 7
            },
            "templateData": "<svg width=\"0\"\n     height=\"0\"\n     class=\"hidden\"\n     xmlns=\"http://www.w3.org/2000/svg\"\n     xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <symbol viewBox=\"0 0 6.35 7.938\"\n            id=\"arrow-down\"\n            xmlns=\"http://www.w3.org/2000/svg\">\n        <path style=\"line-height:normal;font-variant-ligatures:normal;font-variant-position:normal;font-variant-caps:normal;font-variant-numeric:normal;font-variant-alternates:normal;font-feature-settings:normal;text-indent:0;text-align:start;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000;text-transform:none;text-orientation:mixed;white-space:normal;shape-padding:0;isolation:auto;mix-blend-mode:normal;solid-color:#000;solid-opacity:1\"\n              d=\"M3.17.526a.265.265 0 00-.26.268v4.125L.982 2.987a.265.265 0 00-.19-.08.265.265 0 00-.185.455l2.38 2.38a.265.265 0 00.25.071.265.265 0 00.025-.007.265.265 0 00.025-.01.265.265 0 00.023-.012.265.265 0 00.002-.001.265.265 0 00.02-.013.265.265 0 00.017-.014.265.265 0 00.004-.004.265.265 0 00.01-.01l.009-.009 2.372-2.372a.265.265 0 10-.373-.375l-1.93 1.93V.793a.265.265 0 00-.27-.268z\"\n              font-weight=\"400\"\n              font-family=\"sans-serif\"\n              overflow=\"visible\" />\n        <text y=\"21.35\"\n              font-size=\"5\"\n              font-weight=\"bold\"\n              font-family=\"'Helvetica Neue', Helvetica, Arial-Unicode, Arial, Sans-serif\">Created by Handicon</text>\n        <text y=\"26.35\"\n              font-size=\"5\"\n              font-weight=\"bold\"\n              font-family=\"'Helvetica Neue', Helvetica, Arial-Unicode, Arial, Sans-serif\">from the Noun Project</text>\n    </symbol>\n    <symbol viewBox=\"0 0 6.35 7.938\"\n            id=\"arrow-up\"\n            xmlns=\"http://www.w3.org/2000/svg\">\n        <path style=\"line-height:normal;font-variant-ligatures:normal;font-variant-position:normal;font-variant-caps:normal;font-variant-numeric:normal;font-variant-alternates:normal;font-feature-settings:normal;text-indent:0;text-align:start;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000;text-transform:none;text-orientation:mixed;white-space:normal;shape-padding:0;isolation:auto;mix-blend-mode:normal;solid-color:#000;solid-opacity:1\"\n              d=\"M3.17.526a.265.265 0 00-.205.104L.605 2.987a.265.265 0 00.376.375L2.91 1.43v4.125a.265.265 0 10.53 0V1.433L5.37 3.362a.265.265 0 10.373-.375L3.383.628A.265.265 0 003.17.526z\"\n              font-weight=\"400\"\n              font-family=\"sans-serif\"\n              overflow=\"visible\" />\n        <text y=\"21.35\"\n              font-size=\"5\"\n              font-weight=\"bold\"\n              font-family=\"'Helvetica Neue', Helvetica, Arial-Unicode, Arial, Sans-serif\">Created by Handicon</text>\n        <text y=\"26.35\"\n              font-size=\"5\"\n              font-weight=\"bold\"\n              font-family=\"'Helvetica Neue', Helvetica, Arial-Unicode, Arial, Sans-serif\">from the Noun Project</text>\n    </symbol>\n    <symbol viewBox=\"0 0 24 24\"\n            id=\"board\">\n        <g fill=\"currentColor\">\n            <path d=\"M4 18h16.008C20 18 20 6 20 6H3.992C4 6 4 18 4 18zM2 5.994C2 4.893 2.898 4 3.99 4h16.02C21.108 4 22 4.895 22 5.994v12.012A1.997 1.997 0 0120.01 20H3.99A1.994 1.994 0 012 18.006V5.994z\" />\n            <path d=\"M8 6v12h2V6zm6 0v12h2V6z\" />\n        </g>\n    </symbol>\n    <symbol viewBox=\"0 0 16 16\"\n            id=\"bug\"\n            xmlns=\"http://www.w3.org/2000/svg\">\n        <g transform=\"translate(1 1)\"\n           fill=\"none\"\n           fill-rule=\"evenodd\">\n            <rect fill=\"#E5493A\"\n                  width=\"14\"\n                  height=\"14\"\n                  rx=\"2\" />\n            <path d=\"M10 7a3 3 0 11-6 0 3 3 0 016 0\"\n                  fill=\"#FFF\" />\n        </g>\n    </symbol>\n    <symbol viewBox=\"0 0 24 24\"\n            id=\"chevron-down\">\n        <path d=\"M8.292 10.293a1.009 1.009 0 000 1.419l2.939 2.965c.218.215.5.322.779.322s.556-.107.769-.322l2.93-2.955a1.01 1.01 0 000-1.419.987.987 0 00-1.406 0l-2.298 2.317-2.307-2.327a.99.99 0 00-1.406 0z\"\n              fill=\"currentColor\"\n              fill-rule=\"evenodd\" />\n    </symbol>\n    <symbol viewBox=\"0 0 24 24\"\n            id=\"chevron-left\">\n        <path d=\"M13.706 9.698a.988.988 0 000-1.407 1.01 1.01 0 00-1.419 0l-2.965 2.94a1.09 1.09 0 000 1.548l2.955 2.93a1.01 1.01 0 001.42 0 .988.988 0 000-1.407l-2.318-2.297 2.327-2.307z\"\n              fill=\"currentColor\"\n              fill-rule=\"evenodd\" />\n    </symbol>\n    <symbol viewBox=\"0 0 24 24\"\n            id=\"chevron-right\">\n        <path d=\"M10.294 9.698a.988.988 0 010-1.407 1.01 1.01 0 011.419 0l2.965 2.94a1.09 1.09 0 010 1.548l-2.955 2.93a1.01 1.01 0 01-1.42 0 .988.988 0 010-1.407l2.318-2.297-2.327-2.307z\"\n              fill=\"currentColor\"\n              fill-rule=\"evenodd\" />\n    </symbol>\n    <symbol viewBox=\"0 0 24 24\"\n            id=\"cog\">\n        <path d=\"M11.701 16.7a5.002 5.002 0 110-10.003 5.002 5.002 0 010 10.004m8.368-3.117a1.995 1.995 0 01-1.346-1.885c0-.876.563-1.613 1.345-1.885a.48.48 0 00.315-.574 8.947 8.947 0 00-.836-1.993.477.477 0 00-.598-.195 2.04 2.04 0 01-1.29.08 1.988 1.988 0 01-1.404-1.395 2.04 2.04 0 01.076-1.297.478.478 0 00-.196-.597 8.98 8.98 0 00-1.975-.826.479.479 0 00-.574.314 1.995 1.995 0 01-1.885 1.346 1.994 1.994 0 01-1.884-1.345.482.482 0 00-.575-.315c-.708.2-1.379.485-2.004.842a.47.47 0 00-.198.582A2.002 2.002 0 014.445 7.06a.478.478 0 00-.595.196 8.946 8.946 0 00-.833 1.994.48.48 0 00.308.572 1.995 1.995 0 011.323 1.877c0 .867-.552 1.599-1.324 1.877a.479.479 0 00-.308.57 8.99 8.99 0 00.723 1.79.477.477 0 00.624.194c.595-.273 1.343-.264 2.104.238.117.077.225.185.302.3.527.8.512 1.58.198 2.188a.473.473 0 00.168.628 8.946 8.946 0 002.11.897.474.474 0 00.57-.313 1.995 1.995 0 011.886-1.353c.878 0 1.618.567 1.887 1.353a.475.475 0 00.57.313 8.964 8.964 0 002.084-.883.473.473 0 00.167-.631c-.318-.608-.337-1.393.191-2.195.077-.116.185-.225.302-.302.772-.511 1.527-.513 2.125-.23a.477.477 0 00.628-.19 8.925 8.925 0 00.728-1.793.478.478 0 00-.314-.573\"\n              fill=\"currentColor\"\n              fill-rule=\"evenodd\" />\n    </symbol>\n    <symbol viewBox=\"0 0 24 24\"\n            id=\"component\">\n        <g fill=\"currentColor\"\n           fill-rule=\"evenodd\">\n            <path d=\"M5 17.991c0 .007 14.005.009 14.005.009-.006 0-.005-7.991-.005-7.991C19 10.002 4.995 10 4.995 10 5.001 10 5 17.991 5 17.991zM3 10.01C3 8.899 3.893 8 4.995 8h14.01C20.107 8 21 8.902 21 10.009v7.982c0 1.11-.893 2.009-1.995 2.009H4.995A2.004 2.004 0 013 17.991V10.01z\" />\n            <path d=\"M7 8.335c0-.002 2.002-.002 2.002-.002C9 8.333 9 6.665 9 6.665c0 .002-2.002.002-2.002.002C7 6.667 7 8.335 7 8.335zm-2-1.67C5 5.745 5.898 5 6.998 5h2.004C10.106 5 11 5.749 11 6.665v1.67C11 9.255 10.102 10 9.002 10H6.998C5.894 10 5 9.251 5 8.335v-1.67zm10 1.67c0-.002 2.002-.002 2.002-.002C17 8.333 17 6.665 17 6.665c0 .002-2.002.002-2.002.002.002 0 .002 1.668.002 1.668zm-2-1.67C13 5.745 13.898 5 14.998 5h2.004C18.106 5 19 5.749 19 6.665v1.67c0 .92-.898 1.665-1.998 1.665h-2.004C13.894 10 13 9.251 13 8.335v-1.67z\" />\n        </g>\n    </symbol>\n    <symbol viewBox=\"0 0 24 24\"\n            id=\"feedback\">\n        <path d=\"M10.881 5.48l-8.426 6.829c-.396.32-.582.956-.413 1.417l.099.272c.168.462.726.829 1.227.82l1.131-.02 6.062-.102 3.652-.063c.51-.01.788-.385.616-.861l-2.923-8.03c-.105-.288-.324-.441-.567-.441a.731.731 0 00-.458.179zM4.98 15.953l1.754 4.818a1 1 0 101.879-.684l-1.539-4.228-2.094.094zm13.711-9.111l-2.819 1.026a1 1 0 10.684 1.879l2.82-1.026a1 1 0 10-.685-1.88zm-1.792 3.845a1.006 1.006 0 00-.644.766 1.002 1.002 0 00.811 1.159l2.955.52a1 1 0 001.122-1.301l-.017-.047a.997.997 0 00-.758-.621l-2.955-.521a.974.974 0 00-.514.045zm-.548-7.639l-1.929 2.298a1 1 0 001.532 1.286l1.928-2.298a1.001 1.001 0 00-.765-1.643.993.993 0 00-.766.357z\"\n              fill=\"currentColor\"\n              fill-rule=\"evenodd\" />\n    </symbol>\n    <symbol viewBox=\"0 0 24 24\"\n            id=\"filters\">\n        <g fill=\"currentColor\"\n           fill-rule=\"evenodd\">\n            <path d=\"M5 12.991c0 .007 14.005.009 14.005.009C18.999 13 19 5.009 19 5.009 19 5.002 4.995 5 4.995 5 5.001 5 5 12.991 5 12.991zM3 5.01C3 3.899 3.893 3 4.995 3h14.01C20.107 3 21 3.902 21 5.009v7.982c0 1.11-.893 2.009-1.995 2.009H4.995A2.004 2.004 0 013 12.991V5.01zM19 19c-.005 1.105-.9 2-2.006 2H7.006A2.009 2.009 0 015 19h14zm1-3a2.002 2.002 0 01-1.994 2H5.994A2.003 2.003 0 014 16h16z\"\n                  fill-rule=\"nonzero\" />\n            <path d=\"M10.674 11.331c.36.36.941.36 1.3 0l2.758-2.763a.92.92 0 00-1.301-1.298l-2.108 2.11-.755-.754a.92.92 0 00-1.3 1.3l1.406 1.405z\" />\n        </g>\n    </symbol>\n    <symbol viewBox=\"0 0 24 24\"\n            id=\"help\">\n        <g fill-rule=\"evenodd\">\n            <circle fill=\"currentColor\"\n                    cx=\"12\"\n                    cy=\"12\"\n                    r=\"10\" />\n            <circle fill=\"inherit\"\n                    cx=\"12\"\n                    cy=\"18\"\n                    r=\"1\" />\n            <path d=\"M15.89 9.05a3.975 3.975 0 00-2.957-2.942C10.321 5.514 8.017 7.446 8 9.95l.005.147a.992.992 0 00.982.904c.552 0 1-.447 1.002-.998a2.004 2.004 0 014.007-.002c0 1.102-.898 2-2.003 2H12a1 1 0 00-1 .987v2.014a1.001 1.001 0 002.004 0v-.782c0-.217.145-.399.35-.472A3.99 3.99 0 0015.89 9.05\"\n                  fill=\"inherit\" />\n        </g>\n    </symbol>\n    <symbol viewBox=\"0 0 24 24\"\n            id=\"github\">\n        <path fill-rule=\"evenodd\"\n              clip-rule=\"evenodd\"\n              d=\"M12.026,2c-5.509,0-9.974,4.465-9.974,9.974c0,4.406,2.857,8.145,6.821,9.465\tc0.499,0.09,0.679-0.217,0.679-0.481c0-0.237-0.008-0.865-0.011-1.696c-2.775,0.602-3.361-1.338-3.361-1.338\tc-0.452-1.152-1.107-1.459-1.107-1.459c-0.905-0.619,0.069-0.605,0.069-0.605c1.002,0.07,1.527,1.028,1.527,1.028\tc0.89,1.524,2.336,1.084,2.902,0.829c0.091-0.645,0.351-1.085,0.635-1.334c-2.214-0.251-4.542-1.107-4.542-4.93\tc0-1.087,0.389-1.979,1.024-2.675c-0.101-0.253-0.446-1.268,0.099-2.64c0,0,0.837-0.269,2.742,1.021\tc0.798-0.221,1.649-0.332,2.496-0.336c0.849,0.004,1.701,0.115,2.496,0.336c1.906-1.291,2.742-1.021,2.742-1.021\tc0.545,1.372,0.203,2.387,0.099,2.64c0.64,0.696,1.024,1.587,1.024,2.675c0,3.833-2.33,4.675-4.552,4.922\tc0.355,0.308,0.675,0.916,0.675,1.846c0,1.334-0.012,2.41-0.012,2.737c0,0.267,0.178,0.577,0.687,0.479\tC19.146,20.115,22,16.379,22,11.974C22,6.465,17.535,2,12.026,2z\" />\n    </symbol>\n    <symbol viewBox=\"0 0 24 24\"\n            id=\"link\">\n        <g fill=\"currentColor\"\n           fill-rule=\"evenodd\">\n            <path d=\"M12.856 5.457l-.937.92a1.002 1.002 0 000 1.437 1.047 1.047 0 001.463 0l.984-.966c.967-.95 2.542-1.135 3.602-.288a2.54 2.54 0 01.203 3.81l-2.903 2.852a2.646 2.646 0 01-3.696 0l-1.11-1.09L9 13.57l1.108 1.089c1.822 1.788 4.802 1.788 6.622 0l2.905-2.852a4.558 4.558 0 00-.357-6.82c-1.893-1.517-4.695-1.226-6.422.47\" />\n            <path d=\"M11.144 19.543l.937-.92a1.002 1.002 0 000-1.437 1.047 1.047 0 00-1.462 0l-.985.966c-.967.95-2.542 1.135-3.602.288a2.54 2.54 0 01-.203-3.81l2.903-2.852a2.646 2.646 0 013.696 0l1.11 1.09L15 11.43l-1.108-1.089c-1.822-1.788-4.802-1.788-6.622 0l-2.905 2.852a4.558 4.558 0 00.357 6.82c1.893 1.517 4.695 1.226 6.422-.47\" />\n        </g>\n    </symbol>\n    <symbol viewBox=\"0 0 160 146\"\n            id=\"no-result\"\n            xmlns=\"http://www.w3.org/2000/svg\">\n        <defs>\n            <linearGradient x1=\"14.22%\"\n                            y1=\"85.365%\"\n                            x2=\"85.257%\"\n                            y2=\"14.651%\"\n                            id=\"na\">\n                <stop stop-color=\"#C1C7D0\"\n                      offset=\"56%\" />\n                <stop stop-color=\"#E9EBEF\"\n                      stop-opacity=\".5\"\n                      offset=\"97%\" />\n            </linearGradient>\n        </defs>\n        <g fill-rule=\"nonzero\"\n           fill=\"none\">\n            <path d=\"M81.363 145.862c-.715 0-1.427.016-2.136.046a1.798 1.798 0 11-.077-3.593h.054a67.405 67.405 0 0013.58-1.452 1.8 1.8 0 11.766 3.516 71 71 0 01-12.187 1.483zm-11.874-.626c-.104.009-.21.009-.314 0a69.905 69.905 0 01-13.986-3.433 1.8 1.8 0 111.217-3.386 66.287 66.287 0 0013.26 3.264 1.797 1.797 0 01-.185 3.578l.008-.023zm33.156-3.57a1.796 1.796 0 01-.689-3.486 66.438 66.438 0 0012.249-6.016 1.808 1.808 0 012.761 1.466c.023.644-.3 1.25-.847 1.592a70.122 70.122 0 01-12.915 6.344c-.179.07-.367.112-.559.123v-.023zm-55.763-3.738a1.794 1.794 0 01-.903-.206 70.552 70.552 0 01-11.95-8.011 1.795 1.795 0 01-.238-2.53 1.801 1.801 0 012.534-.237 66.9 66.9 0 0011.346 7.59 1.795 1.795 0 01-.766 3.386l-.023.008zm-18.717-14.562a1.8 1.8 0 01-1.401-.588 70.33 70.33 0 01-8.506-11.596 1.796 1.796 0 011.543-2.709 1.802 1.802 0 011.566.89 66.752 66.752 0 008.068 11 1.794 1.794 0 01-1.27 3.003zm110.17-11.879a1.8 1.8 0 01-1.605-.868 1.794 1.794 0 01-.018-1.822 66.284 66.284 0 005.527-12.483 1.803 1.803 0 013.43 1.109 69.851 69.851 0 01-5.834 13.14 1.8 1.8 0 01-1.5.924zM15.54 103.293a1.8 1.8 0 01-1.761-1.124 69.74 69.74 0 01-3.981-13.805 1.797 1.797 0 01.608-1.693 1.803 1.803 0 012.937 1.051 66.182 66.182 0 003.827 13.094 1.794 1.794 0 01-1.607 2.477h-.023zm130.825-14.126a1.8 1.8 0 01-1.838-2.102 66.878 66.878 0 00.927-13.606v-.153a1.799 1.799 0 011.734-1.862 1.8 1.8 0 011.864 1.732v.153c.17 4.8-.15 9.605-.957 14.34a1.798 1.798 0 01-1.73 1.49v.008zM10.58 80.063a1.77 1.77 0 01-1.86-1.697v-.076a70.48 70.48 0 01.941-14.264 1.801 1.801 0 013.552.604 66.923 66.923 0 00-.895 13.53 1.828 1.828 0 01-1.738 1.903zm135.64-14.76a1.798 1.798 0 01-1.83-1.476 66.121 66.121 0 00-3.827-13.086 1.81 1.81 0 01.999-2.358 1.814 1.814 0 012.361.997 69.748 69.748 0 014.02 13.805 1.794 1.794 0 01-1.447 2.095l-.276.023zM13.833 56.565a1.794 1.794 0 01-1.776-2.293 69.882 69.882 0 015.819-13.147 1.802 1.802 0 013.13 1.78 66.284 66.284 0 00-5.519 12.476 1.799 1.799 0 01-1.654 1.184zm124.134-13.484a1.8 1.8 0 01-1.615-.886 66.722 66.722 0 00-8.084-10.992 1.795 1.795 0 01.872-3.1 1.8 1.8 0 011.77.684 70.33 70.33 0 018.52 11.58 1.794 1.794 0 01-1.486 2.707l.023.007zm-113.002-7.43a1.794 1.794 0 01-1.485-2.905 70.7 70.7 0 019.952-10.372 1.8 1.8 0 013.084.995 1.795 1.795 0 01-.788 1.741 67.127 67.127 0 00-9.408 9.846 1.8 1.8 0 01-1.355.696zM122.58 25.02c-.44.015-.871-.132-1.21-.413a66.977 66.977 0 00-11.353-7.59 1.797 1.797 0 01-.75-2.431 1.803 1.803 0 012.434-.75 70.607 70.607 0 0111.958 7.996 1.795 1.795 0 01-1.087 3.18l.008.008zm-80-5.275a1.795 1.795 0 01-1.026-3.317 70.084 70.084 0 0112.915-6.36 1.796 1.796 0 111.248 3.371 66.468 66.468 0 00-12.25 6.031 1.793 1.793 0 01-.887.275zm59.36-6.474a1.802 1.802 0 01-.665-.107 66.433 66.433 0 00-13.237-3.226 1.796 1.796 0 01-1.177-2.883 1.802 1.802 0 011.667-.679 69.99 69.99 0 0113.987 3.41 1.796 1.796 0 01-.544 3.493l-.03-.008zm-37.358-2.446a1.797 1.797 0 01-.436-3.554c4.705-.99 9.499-1.503 14.308-1.53a1.798 1.798 0 11.077 3.593h-.054a67.29 67.29 0 00-13.581 1.468 1.817 1.817 0 01-.314.023z\"\n                  opacity=\".3\"\n                  fill=\"#B3BAC5\" />\n            <path d=\"M146.833 26.9a.398.398 0 01-.299-.429 1.3 1.3 0 01.046-.344c.037-.237.085-.471.145-.703a5.814 5.814 0 011.256-2.362 6.684 6.684 0 012.603-1.728l1.898-.764a3.25 3.25 0 002.106-2.224c.098-.377.129-.768.091-1.155a2.673 2.673 0 00-.36-1.116 3.12 3.12 0 00-.864-.932 4.068 4.068 0 00-1.386-.627 3.335 3.335 0 00-1.6-.069c-.456.1-.886.292-1.263.566a3.487 3.487 0 00-.919 1.04c-.248.409-.436.851-.559 1.314-.035.143-.066.275-.092.398a.612.612 0 01-.765.466l-2.948-.917a.604.604 0 01-.436-.635c0-.092.013-.183.038-.275.046-.26.1-.515.161-.764a7.303 7.303 0 011.171-2.454 6.787 6.787 0 012.044-1.858 7.449 7.449 0 012.772-.947 8.564 8.564 0 013.406.26 9.63 9.63 0 013.216 1.444 7.91 7.91 0 012.051 2.102c.49.75.809 1.598.934 2.485.124.857.074 1.73-.145 2.568a6.373 6.373 0 01-1.776 3.142 9.113 9.113 0 01-3.024 1.826l-1.6.604a3.92 3.92 0 00-1.684 1.055 4.377 4.377 0 00-.888 1.521.398.398 0 01-.483.253l-2.847-.742zm-2.343 4.486c.173-.699.624-1.298 1.248-1.659a2.576 2.576 0 012.051-.29 2.729 2.729 0 011.945 3.325 2.569 2.569 0 01-1.263 1.636 2.66 2.66 0 01-2.06.267 2.679 2.679 0 01-1.921-3.286v.007zM14.936 17.061a.397.397 0 01-.268-.443.9.9 0 01.069-.344c.055-.232.121-.462.199-.688a5.816 5.816 0 011.416-2.293 6.686 6.686 0 012.718-1.529l1.944-.642a3.252 3.252 0 002.251-2.087c.123-.37.18-.757.168-1.146a2.672 2.672 0 00-.283-1.14 3.12 3.12 0 00-.765-.985 4.067 4.067 0 00-1.34-.719 3.38 3.38 0 00-2.94.306c-.39.252-.726.58-.987.963a5.004 5.004 0 00-.758 1.666.612.612 0 01-.82.428l-2.855-1.1a.604.604 0 01-.39-.665c0-.092.02-.184.061-.276.061-.254.133-.51.214-.764a7.305 7.305 0 011.34-2.37 6.789 6.789 0 012.167-1.704A7.45 7.45 0 0118.9.764a8.563 8.563 0 013.377.49 9.628 9.628 0 013.115 1.658 7.907 7.907 0 011.907 2.24c.437.78.699 1.646.765 2.538a6.488 6.488 0 01-.321 2.553 6.374 6.374 0 01-1.99 3.012 9.115 9.115 0 01-3.14 1.62l-1.638.49a3.921 3.921 0 00-1.753.94 4.206 4.206 0 00-.559.665c-.168.24-.312.496-.429.764a.398.398 0 01-.497.222l-2.802-.895zm-2.641 4.342a2.654 2.654 0 011.355-1.575 2.576 2.576 0 012.067-.152 2.728 2.728 0 011.715 3.447 2.57 2.57 0 01-1.37 1.529 2.66 2.66 0 01-2.075.13 2.674 2.674 0 01-1.692-3.379zM10.25 138.646a.398.398 0 01-.49-.175l-.16-.314a7.126 7.126 0 01-.283-.657 5.809 5.809 0 01-.33-2.653 6.667 6.667 0 011.141-2.912l1.11-1.72c.653-.88.817-2.03.437-3.057a3.309 3.309 0 00-.59-1.002 2.679 2.679 0 00-.934-.71 3.127 3.127 0 00-1.248-.268 4.07 4.07 0 00-1.53.283 3.33 3.33 0 00-1.356.863 3.37 3.37 0 00-.658 1.223 3.48 3.48 0 00-.169 1.369 5 5 0 00.299 1.399c.051.137.102.262.153.374a.61.61 0 01-.367.833l-2.91.948a.605.605 0 01-.72-.275l-.114-.252a8.287 8.287 0 01-.298-.704 7.298 7.298 0 01-.467-2.69c.014-.929.22-1.845.604-2.69a7.43 7.43 0 011.692-2.363 8.554 8.554 0 012.94-1.735 9.636 9.636 0 013.46-.665 7.926 7.926 0 012.894.543 6.124 6.124 0 012.19 1.528 6.496 6.496 0 011.385 2.194 6.366 6.366 0 01.352 3.593 9.09 9.09 0 01-1.424 3.233l-.964 1.414a3.91 3.91 0 00-.766 1.827c-.03.288-.03.577 0 .864.026.298.083.593.169.88.018.19-.1.366-.284.42l-2.763 1.054zm.66 5.023a2.649 2.649 0 01.068-2.08 2.57 2.57 0 011.531-1.414 2.734 2.734 0 013.506 1.613c.26.67.227 1.42-.092 2.064-.299.654-.851 1.16-1.53 1.399a2.683 2.683 0 01-3.46-1.59l-.024.008z\"\n                  opacity=\".3\"\n                  fill=\"#C1C7D0\" />\n            <path d=\"M115.108 102.88l-5.474-5.297-7.372 7.644 5.474 5.297a10.27 10.27 0 012.84 4.961 10.27 10.27 0 002.84 4.961l22.201 21.48a8.49 8.49 0 0011.996-.191 8.463 8.463 0 00-.191-11.978l-22.2-21.48a10.294 10.294 0 00-5.061-2.675 10.294 10.294 0 01-5.053-2.722z\"\n                  fill=\"#CFD4DB\" />\n            <path d=\"M119.946 105.487a10.294 10.294 0 01-4.83-2.622l-1.67-1.613a5.32 5.32 0 00-5.157-1.276 5.3 5.3 0 00-2.214 8.92l1.669 1.613a10.27 10.27 0 012.778 4.732 44.71 44.71 0 009.424-9.754z\"\n                  fill=\"#DFE1E5\"\n                  style=\"mix-blend-mode:multiply\" />\n            <path d=\"M78.852 120.01c-24.332.175-44.259-19.261-44.654-43.554-.394-24.292 18.89-44.364 43.214-44.978a44.086 44.086 0 0131.556 12.46c12.881 12.455 16.982 31.43 10.39 48.08-6.592 16.65-22.578 27.698-40.506 27.992zM77.55 42.042c-16.104.26-29.78 11.844-32.666 27.666-2.886 15.822 5.823 31.476 20.802 37.388 14.978 5.913 32.053.438 40.783-13.077 8.73-13.515 6.684-31.305-4.888-42.49a33.566 33.566 0 00-24.03-9.487z\"\n                  fill=\"url(#na)\" />\n            <path d=\"M91.805 65.906l-4.088-3.99a1.532 1.532 0 00-2.167 0l-7.464 7.644-7.655-7.506a1.532 1.532 0 00-2.167 0l-4.019 4.082a1.528 1.528 0 000 2.163l7.655 7.483-7.494 7.644a1.528 1.528 0 000 2.164l4.088 4.013a1.532 1.532 0 002.166 0l7.495-7.644 7.656 7.483a1.532 1.532 0 002.166 0l4.02-4.082a1.528 1.528 0 000-2.163l-7.656-7.483 7.494-7.644a1.528 1.528 0 00-.03-2.164z\"\n                  fill=\"#C1C7D0\" />\n        </g>\n    </symbol>\n    <symbol viewBox=\"0 0 24 24\"\n            id=\"page\">\n        <g fill=\"currentColor\"\n           fill-rule=\"evenodd\">\n            <rect x=\"8\"\n                  y=\"6\"\n                  width=\"8\"\n                  height=\"2\"\n                  rx=\"1\" />\n            <rect x=\"8\"\n                  y=\"9\"\n                  width=\"8\"\n                  height=\"2\"\n                  rx=\"1\" />\n            <rect x=\"8\"\n                  y=\"12\"\n                  width=\"4\"\n                  height=\"2\"\n                  rx=\"1\" />\n            <path d=\"M7 4v16h10V4H7zm-2-.01C5 2.892 5.897 2 7.006 2h9.988C18.102 2 19 2.898 19 3.99v16.02c0 1.099-.897 1.99-2.006 1.99H7.006A2.003 2.003 0 015 20.01V3.99z\"\n                  fill-rule=\"nonzero\" />\n        </g>\n    </symbol>\n    <symbol viewBox=\"0 0 24 24\"\n            id=\"plus\">\n        <path d=\"M13 11V3.993A.997.997 0 0012 3c-.556 0-1 .445-1 .993V11H3.993A.997.997 0 003 12c0 .557.445 1 .993 1H11v7.007c0 .548.448.993 1 .993.556 0 1-.445 1-.993V13h7.007A.997.997 0 0021 12c0-.556-.445-1-.993-1H13z\"\n              fill=\"currentColor\"\n              fill-rule=\"evenodd\" />\n    </symbol>\n    <symbol viewBox=\"0 0 24 24\"\n            id=\"report\">\n        <g fill=\"currentColor\">\n            <path d=\"M21 17H4.995C4.448 17 4 16.548 4 15.991V6a1 1 0 10-2 0v9.991A3.004 3.004 0 004.995 19H21a1 1 0 000-2zm-3-8v3a1 1 0 002 0V8a1 1 0 00-1-1h-4a1 1 0 000 2h3z\" />\n            <path d=\"M13.293 13.707a1 1 0 001.414 0l4-4a1 1 0 10-1.414-1.414L14 11.586l-2.293-2.293a1 1 0 00-1.414 0l-4 4a1 1 0 001.414 1.414L11 11.414l2.293 2.293z\" />\n        </g>\n    </symbol>\n    <symbol viewBox=\"0 0 24 24\"\n            id=\"search\">\n        <path d=\"M16.436 15.085l3.94 4.01a1 1 0 01-1.425 1.402l-3.938-4.006a7.5 7.5 0 111.423-1.406zM10.5 16a5.5 5.5 0 100-11 5.5 5.5 0 000 11z\"\n              fill=\"currentColor\"\n              fill-rule=\"evenodd\" />\n    </symbol>\n    <symbol viewBox=\"0 0 24 24\"\n            id=\"ship\">\n        <g fill=\"currentColor\"\n           fill-rule=\"evenodd\">\n            <path d=\"M6 12h8v-2H6v2zM4 8.99C4 8.445 4.456 8 5.002 8h9.996C15.55 8 16 8.451 16 8.99V14H4V8.99z\"\n                  fill-rule=\"nonzero\" />\n            <path d=\"M6 7.005C6 5.898 6.898 5 7.998 5h2.004C11.106 5 12 5.894 12 7.005V10H6V7.005zm4 0V7H7.999c.005 0 .002.003.002.005V8h2v-.995z\" />\n            <path d=\"M4.5 17h13.994l1.002-3H4.14l.36 3zm-2.495-4.012A.862.862 0 012.883 12h18.393c.55 0 .857.417.681.944l-1.707 5.112c-.174.521-.758.944-1.315.944H3.725a1.149 1.149 0 01-1.118-.988l-.602-5.024z\"\n                  fill-rule=\"nonzero\" />\n        </g>\n    </symbol>\n    <symbol viewBox=\"0 0 24 24\"\n            id=\"star\">\n        <path d=\"M15.673 14.042l3.673-3.58-5.076-.738L12 5.125l-2.27 4.6-5.076.737 3.673 3.58-.867 5.055L12 16.711l4.54 2.386-.867-5.055zM12 19.04l-4.505 2.37a1.546 1.546 0 01-2.244-1.63l.86-5.017-3.644-3.553a1.546 1.546 0 01.857-2.637l5.037-.732 2.252-4.564a1.546 1.546 0 012.774 0l2.252 4.564 5.037.732a1.546 1.546 0 01.857 2.637l-3.645 3.553.86 5.016a1.546 1.546 0 01-2.243 1.63L12 19.04z\"\n              fill=\"currentColor\" />\n    </symbol>\n    <symbol viewBox=\"0 0 16 16\"\n            id=\"story\"\n            xmlns=\"http://www.w3.org/2000/svg\">\n        <g transform=\"translate(1 1)\"\n           fill=\"none\"\n           fill-rule=\"evenodd\">\n            <rect fill=\"#63BA3C\"\n                  width=\"14\"\n                  height=\"14\"\n                  rx=\"2\" />\n            <path d=\"M9 3H5a1 1 0 00-1 1v6.5a.5.5 0 00.5.5.49.49 0 00.41-.231l.004.001L6.84 8.54a.2.2 0 01.32 0l1.926 2.23.004-.001A.49.49 0 009.5 11a.5.5 0 00.5-.5V4a1 1 0 00-1-1\"\n                  fill=\"#FFF\" />\n        </g>\n    </symbol>\n    <symbol viewBox=\"0 0 16 16\"\n            id=\"task\"\n            xmlns=\"http://www.w3.org/2000/svg\">\n        <g transform=\"translate(1 1)\"\n           fill=\"none\"\n           fill-rule=\"evenodd\">\n            <rect fill=\"#4BADE8\"\n                  width=\"14\"\n                  height=\"14\"\n                  rx=\"2\" />\n            <path d=\"M6 9.5l4-5m-4 5l-2-2\"\n                  stroke=\"#FFF\"\n                  stroke-width=\"2\"\n                  stroke-linecap=\"round\" />\n        </g>\n    </symbol>\n    <symbol viewBox=\"0 0 24 24\"\n            id=\"times\">\n        <path d=\"M12 10.586L6.707 5.293a1 1 0 00-1.414 1.414L10.586 12l-5.293 5.293a1 1 0 001.414 1.414L12 13.414l5.293 5.293a1 1 0 001.414-1.414L13.414 12l5.293-5.293a1 1 0 10-1.414-1.414L12 10.586z\"\n              fill=\"currentColor\" />\n    </symbol>\n    <symbol viewBox=\"0 0 24 24\"\n            id=\"expand\">\n        <path d=\"M21 15.344L18.879 17.465 15.707 14.293 14.293 15.707 17.465 18.879 15.344 21 21 21zM3 8.656L5.121 6.535 8.293 9.707 9.707 8.293 6.535 5.121 8.656 3 3 3zM21 3L15.344 3 17.465 5.121 14.293 8.293 15.707 9.707 18.879 6.535 21 8.656zM3 21L8.656 21 6.535 18.879 9.707 15.707 8.293 14.293 5.121 17.465 3 15.344z\" />\n    </symbol>\n    <symbol viewBox=\"0 0 24 24\"\n            id=\"trash\"\n            xmlns=\"http://www.w3.org/2000/svg\">\n        <path fill=\"none\"\n              d=\"M17.004 20l-.001-12h-10v12h10.001zm-4.001-10h2v8h-2v-8zm-4 0h2v8h-2v-8zm0-6h6v2h-6z\" />\n        <path d=\"M5.003 20c0 1.103.897 2 2 2h10c1.103 0 2-.897 2-2V8h2V6h-4V4c0-1.103-.897-2-2-2h-6c-1.103 0-2 .897-2 2v2h-4v2h2v12zm4-16h6v2h-6V4zm-1 4h9l.001 12H7.003V8h1z\" />\n        <path d=\"M9.003 10h2v8h-2zm4 0h2v8h-2z\" />\n    </symbol>\n    <symbol viewBox=\"0 0 24 24\"\n            id=\"spin\"\n            xmlns=\"http://www.w3.org/2000/svg\">\n\n        <path d=\"M12,22c5.421,0,10-4.579,10-10h-2c0,4.337-3.663,8-8,8s-8-3.663-8-8c0-4.336,3.663-8,8-8V2C6.579,2,2,6.58,2,12 C2,17.421,6.579,22,12,22z\" />\n    </symbol>\n</svg>"
        },
        {
            "name": "SvgIconComponent",
            "id": "component-SvgIconComponent-6a19664e54b9329c9aadb77223de412a",
            "file": "src/app/jira-control/svg-icon/svg-icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "svg-icon",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./svg-icon.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "fill",
                    "defaultValue": "'currentColor'",
                    "line": 10
                },
                {
                    "name": "name",
                    "line": 8,
                    "type": "string"
                },
                {
                    "name": "size",
                    "defaultValue": "16",
                    "line": 9
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "window",
                    "defaultValue": "window",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'svg-icon',\n  templateUrl: './svg-icon.component.html'\n})\nexport class SvgIconComponent {\n  @Input() name: string;\n  @Input() size = 16;\n  @Input() fill = 'currentColor';\n  window: any = window;\n\n  constructor() {}\n\n  get iconUrl() {\n    return `${this.window.location.href}#${this.name}`;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "accessors": {
                "iconUrl": {
                    "name": "iconUrl",
                    "getSignature": {
                        "name": "iconUrl",
                        "type": "",
                        "returnType": "",
                        "line": 15
                    }
                }
            },
            "templateData": "<svg version=\"1.1\"\n     [style.width.px]=\"size\"\n     [style.height.px]=\"size\"\n     [style.fill]=\"fill\"\n     xmlns=\"http://www.w3.org/2000/svg\"\n     xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <use [attr.xlink:href]=\"iconUrl\"></use>\n</svg>"
        },
        {
            "name": "UserComponent",
            "id": "component-UserComponent-f1549c7d2c03cf1442e0e0b89ed780aa",
            "file": "src/app/project/components/user/user.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "j-user",
            "styleUrls": [
                "./user.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "line": 10,
                    "type": "JUser"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { JUser } from '@trungk18/interface/user';\n\n@Component({\n  selector: 'j-user',\n  templateUrl: './user.component.html',\n  styleUrls: ['./user.component.scss']\n})\nexport class UserComponent {\n  @Input() user: JUser;\n\n  constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./user.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 10
            },
            "templateData": "<div class=\"flex items-center\">\n    <j-avatar [avatarUrl]=\"user?.avatarUrl\"\n              [size]=\"20\">\n    </j-avatar>\n    <span class=\"ml-1-5 mr-1-5 user-name\">\n        {{ user?.name }}\n    </span>\n</div>"
        },
        {
            "name": "WorkInProgressComponent",
            "id": "component-WorkInProgressComponent-706e199ca52362b9f6e350f414cd4e21",
            "file": "src/app/work-in-progress/work-in-progress.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "work-in-progress",
            "styleUrls": [
                "./work-in-progress.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./work-in-progress.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'work-in-progress',\n  templateUrl: './work-in-progress.component.html',\n  styleUrls: ['./work-in-progress.component.scss']\n})\nexport class WorkInProgressComponent {\n\n  constructor() { }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./work-in-progress.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "templateData": "<div class=\"container p-5 mx-auto\">\n    <h1 class=\"text-3xl text-center\">A simplified Jira clone built with Angular and Akita</h1>\n\n    <img class=\"w-auto mx-auto md:max-w-2xl\"\n         src=\"assets/img/jira-clone-tech-stack.png\" />\n\n    <h3 class=\"m-10 text-center\">\n        <a class=\"text-lg text-blue-500 hover:text-blue-800\"\n           href=\"https://jira.trungk18.com/\">Visit the work in progress app</a> |\n        <a class=\"text-lg text-blue-500 hover:text-blue-800\"\n           href=\"hhttps://github.com/trungk18/jira-clone-angular/tree/master/frontend\">View front-end code</a>\n    </h3>\n\n    <div class=\"px-4 py-3 text-teal-900 bg-teal-100 border-t-4 border-teal-500 rounded-b shadow-md\"\n         role=\"alert\">\n        <div class=\"flex\">\n            <div class=\"py-1\"><svg class=\"w-6 h-6 mr-4 text-teal-500 fill-current\"\n                     xmlns=\"http://www.w3.org/2000/svg\"\n                     viewBox=\"0 0 20 20\">\n                    <path d=\"M2.93 17.07A10 10 0 1 1 17.07 2.93 10 10 0 0 1 2.93 17.07zm12.73-1.41A8 8 0 1 0 4.34 4.34a8 8 0 0 0 11.32 11.32zM9 11V9h2v6H9v-4zm0-6h2v2H9V5z\" /></svg></div>\n            <section>\n                <p class=\"font-bold\">Work in progress!</p>\n                <p class=\"\">\n                    It is still <u>under development</u>.\n                </p>\n                <p class=\"pt-2\">\n                    I am planning to finish coding in about two weeks <u>(13 - 27 Jun 2020)</u> in my spare time.\n                </p>\n                <p class=\"pt-2\">\n                    In the meantime, I am gradually writing a series about how I built it step by step in my blog. Please visit <a class=\"text-blue-500 hover:text-blue-800\"\n                       href=\"https://trungk18.com/\">trungk18.com</a>\n                </p>\n            </section>\n        </div>\n    </div>\n    <p class=\"mt-8\">\n        Made with <span style=\"color: #e25555;\">&hearts;</span> in Singapore\n    </p>\n    <div>© 2020 <a class=\"text-blue-500 hover:text-blue-800\"\n           href=\"https://trungk18.com/\">Trung Vo</a></div>\n</div>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "JiraControlModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AvatarComponent"
                        },
                        {
                            "name": "BreadcrumbsComponent"
                        },
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "InputComponent"
                        },
                        {
                            "name": "SvgDefinitionsComponent"
                        },
                        {
                            "name": "SvgIconComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AvatarComponent"
                        },
                        {
                            "name": "BreadcrumbsComponent"
                        },
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "InputComponent"
                        },
                        {
                            "name": "SvgDefinitionsComponent"
                        },
                        {
                            "name": "SvgIconComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProjectModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddIssueModalComponent"
                        },
                        {
                            "name": "AutofocusDirective"
                        },
                        {
                            "name": "BoardComponent"
                        },
                        {
                            "name": "BoardDndComponent"
                        },
                        {
                            "name": "BoardDndListComponent"
                        },
                        {
                            "name": "BoardFilterComponent"
                        },
                        {
                            "name": "FullIssueDetailComponent"
                        },
                        {
                            "name": "IssueAssigneesComponent"
                        },
                        {
                            "name": "IssueAssigneesSelectComponent"
                        },
                        {
                            "name": "IssueCardComponent"
                        },
                        {
                            "name": "IssueCommentComponent"
                        },
                        {
                            "name": "IssueCommentsComponent"
                        },
                        {
                            "name": "IssueDeleteModalComponent"
                        },
                        {
                            "name": "IssueDescriptionComponent"
                        },
                        {
                            "name": "IssueDetailComponent"
                        },
                        {
                            "name": "IssueLoaderComponent"
                        },
                        {
                            "name": "IssueModalComponent"
                        },
                        {
                            "name": "IssuePriorityComponent"
                        },
                        {
                            "name": "IssuePrioritySelectComponent"
                        },
                        {
                            "name": "IssueReporterComponent"
                        },
                        {
                            "name": "IssueReporterSelectComponent"
                        },
                        {
                            "name": "IssueResultComponent"
                        },
                        {
                            "name": "IssueStatusComponent"
                        },
                        {
                            "name": "IssueTitleComponent"
                        },
                        {
                            "name": "IssueTypeComponent"
                        },
                        {
                            "name": "IssueTypeSelectComponent"
                        },
                        {
                            "name": "NavbarLeftComponent"
                        },
                        {
                            "name": "NavigationComponent"
                        },
                        {
                            "name": "ProjectComponent"
                        },
                        {
                            "name": "ResizerComponent"
                        },
                        {
                            "name": "SearchDrawerComponent"
                        },
                        {
                            "name": "SettingsComponent"
                        },
                        {
                            "name": "SidebarComponent"
                        },
                        {
                            "name": "UserComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "JiraControlModule"
                        },
                        {
                            "name": "ProjectRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProjectRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SnowModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SnowComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SnowComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "WorkInProgressModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "WorkInProgressComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "WorkInProgressRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "WorkInProgressRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "avatarUrl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/jira-control/avatar/avatar.stories.ts",
                "type": "string",
                "defaultValue": "'https://res.cloudinary.com/dvujyxh7e/image/upload/c_scale,w_128/v1593253478/trung-vo_bioxmc.png'"
            },
            {
                "name": "BASE_TIMER_DELAY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/directives/autofocus.directive.ts",
                "type": "number",
                "defaultValue": "10"
            },
            {
                "name": "BoardPageComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/project/components/board/index.ts",
                "type": "[]",
                "defaultValue": "[BoardDndComponent, BoardDndListComponent, BoardFilterComponent]"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/jira-control/breadcrumbs/breadcrumbs.stories.ts",
                "type": "Story<BreadcrumbsComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Empty",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/jira-control/button/button.stories.ts",
                "type": "Story<ButtonProps>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "EnvironmentModel",
                "defaultValue": "{\n  production: true,\n  apiUrl: '/assets/data' // 'https://jira-clone-angular-api.herokuapp.com'\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "EnvironmentModel",
                "defaultValue": "{\n  production: false,\n  apiUrl: '/assets/data' // 'http://localhost:3000'\n}"
            },
            {
                "name": "Flat",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/jira-control/input/input.stories.ts",
                "type": "Story<InputComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "GOOGLE_ANALYTICS_ID",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/services/google-analytics.service.ts",
                "type": "string",
                "defaultValue": "'UA-80363801-4'"
            },
            {
                "name": "gtag",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/services/google-analytics.service.ts",
                "type": "any"
            },
            {
                "name": "initSentry",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/main.ts",
                "type": "",
                "defaultValue": "() => {\n  Sentry.init({\n    dsn: 'https://b2af8332e38f486d910f06b79df66365@o495789.ingest.sentry.io/5569161',\n    autoSessionTracking: true,\n    integrations: [\n      new Integrations.BrowserTracing({\n        tracingOrigins: ['localhost', 'https://jira.trungk18.com/'],\n        routingInstrumentation: Sentry.routingInstrumentation\n      })\n    ],\n\n    tracesSampleRate: 1.0\n  });\n}"
            },
            {
                "name": "IssuePriorityColors",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/interface/issue.ts",
                "type": "object",
                "defaultValue": "{\n  [IssuePriority.HIGHEST]: '#CD1317',\n  [IssuePriority.HIGH]: '#E9494A',\n  [IssuePriority.MEDIUM]: '#E97F33',\n  [IssuePriority.LOW]: '#2D8738',\n  [IssuePriority.LOWEST]: '#57A55A'\n}"
            },
            {
                "name": "IssueStatusDisplay",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/interface/issue.ts",
                "type": "object",
                "defaultValue": "{\n  [IssueStatus.BACKLOG]: 'Backlog',\n  [IssueStatus.SELECTED]: 'Selected for Development',\n  [IssueStatus.IN_PROGRESS]: 'In progress',\n  [IssueStatus.DONE]: 'Done'\n}"
            },
            {
                "name": "IssueUtilComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/project/components/issues/index.ts",
                "type": "[]",
                "defaultValue": "[\n  IssueCardComponent,\n  IssueLoaderComponent,\n  IssueModalComponent,\n  IssueDetailComponent,\n  IssueTitleComponent,\n  IssueDescriptionComponent,\n  IssueTypeComponent,\n  IssuePriorityComponent,\n  IssueAssigneesComponent,\n  IssueReporterComponent,\n  IssueStatusComponent,\n  IssueCommentsComponent,\n  IssueCommentComponent,\n  IssueDeleteModalComponent\n]"
            },
            {
                "name": "JiraControlComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/jira-control/jira-control.module.ts",
                "type": "[]",
                "defaultValue": "[\n  SvgDefinitionsComponent,\n  SvgIconComponent,\n  BreadcrumbsComponent,\n  ButtonComponent,\n  InputComponent,\n  AvatarComponent\n]"
            },
            {
                "name": "NavigationComponents",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/project/components/navigation/index.ts",
                "type": "[]",
                "defaultValue": "[SidebarComponent, NavbarLeftComponent, NavigationComponent]"
            },
            {
                "name": "NZ_JIRA_ICONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/project/config/icons.ts",
                "type": "IconDefinition[]",
                "defaultValue": "[\n  QuestionCircleFill,\n  PlusOutline,\n  SearchOutline,\n  CloseOutline,\n  TwitterOutline,\n  EditOutline\n]"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/jira-control/button/button.stories.ts",
                "type": "Story<ButtonProps>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "quillConfiguration",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/project/config/editor.ts",
                "type": "object",
                "defaultValue": "{\n  toolbar: [\n    ['bold', 'italic', 'underline', 'strike'],\n    ['blockquote', 'code-block'],\n    [{ list: 'ordered' }, { list: 'bullet' }],\n    [{ header: [1, 2, 3, 4, 5, 6, false] }],\n    [{ color: [] }, { background: [] }],\n    ['link'],\n    ['clean']\n  ]\n}"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "Rounded",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/jira-control/avatar/avatar.stories.ts",
                "type": "Story<AvatarComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/jira-control/button/button.stories.ts",
                "type": "Story<ButtonProps>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "SideBarLinks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/project/config/sidebar.ts",
                "type": "[]",
                "defaultValue": "[\n  new SideBarLink('Kanban Board', 'board', 'board'),\n  new SideBarLink('Project Settings', 'cog', 'settings'),\n  new SideBarLink('Releases', 'ship'),\n  new SideBarLink('Issues and filters', 'filters'),\n  new SideBarLink('Pages', 'page'),\n  new SideBarLink('Reports', 'report'),\n  new SideBarLink('Components', 'component')\n]"
            },
            {
                "name": "Square",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/jira-control/avatar/avatar.stories.ts",
                "type": "Story<AvatarComponent>",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/jira-control/breadcrumbs/breadcrumbs.stories.ts",
                "type": "Story<BreadcrumbsComponent>",
                "defaultValue": "(args: BreadcrumbsComponent) => ({\n  component: BreadcrumbsComponent,\n  props: args\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/jira-control/button/button.stories.ts",
                "type": "Story<ButtonComponent>",
                "defaultValue": "({ label, className }: Partial<ButtonProps>) => ({\n  component: ButtonComponent,\n  moduleMetadata: {\n    declarations: [ButtonComponent], // Removed if no template\n    imports: []\n  },\n  template: `<j-button className='${className}'>${label}</j-button>`\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/jira-control/avatar/avatar.stories.ts",
                "type": "Story<AvatarComponent>",
                "defaultValue": "(args: AvatarComponent) => ({\n  component: AvatarComponent,\n  props: args\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/jira-control/input/input.stories.ts",
                "type": "Story<InputComponent>",
                "defaultValue": "(args: InputComponent) => ({\n  component: InputComponent,\n  props: args\n})"
            }
        ],
        "functions": [
            {
                "name": "createInitialAuthState",
                "file": "src/app/project/auth/auth.store.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [],
                "returnType": "AuthState"
            },
            {
                "name": "createInitialFilterState",
                "file": "src/app/project/state/filter/filter.store.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [],
                "returnType": "FilterState"
            },
            {
                "name": "createInitialState",
                "file": "src/app/project/state/project/project.store.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [],
                "returnType": "ProjectState"
            },
            {
                "name": "NoWhitespaceValidator",
                "file": "src/app/core/validators/no-whitespace.validator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [],
                "returnType": "ValidatorFn"
            }
        ],
        "typealiases": [
            {
                "name": "Handler",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "src/app/project/components/navigation/navbar-left/navbar-left.component.ts",
                "description": "",
                "kind": 162
            }
        ],
        "enumerations": [
            {
                "name": "IssuePriority",
                "childs": [
                    {
                        "name": "LOWEST",
                        "value": "Lowest"
                    },
                    {
                        "name": "LOW",
                        "value": "Low"
                    },
                    {
                        "name": "MEDIUM",
                        "value": "Medium"
                    },
                    {
                        "name": "HIGH",
                        "value": "High"
                    },
                    {
                        "name": "HIGHEST",
                        "value": "Highest"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/interface/issue.ts"
            },
            {
                "name": "IssueStatus",
                "childs": [
                    {
                        "name": "BACKLOG",
                        "value": "Backlog"
                    },
                    {
                        "name": "SELECTED",
                        "value": "Selected"
                    },
                    {
                        "name": "IN_PROGRESS",
                        "value": "InProgress"
                    },
                    {
                        "name": "DONE",
                        "value": "Done"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/interface/issue.ts"
            },
            {
                "name": "IssueType",
                "childs": [
                    {
                        "name": "STORY",
                        "value": "Story"
                    },
                    {
                        "name": "TASK",
                        "value": "Task"
                    },
                    {
                        "name": "BUG",
                        "value": "Bug"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/interface/issue.ts"
            },
            {
                "name": "ProjectCategory",
                "childs": [
                    {
                        "name": "SOFTWARE",
                        "value": "Software"
                    },
                    {
                        "name": "MARKETING",
                        "value": "Marketing"
                    },
                    {
                        "name": "BUSINESS",
                        "value": "Business"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/interface/project.ts"
            }
        ],
        "groupedVariables": {
            "src/app/jira-control/avatar/avatar.stories.ts": [
                {
                    "name": "avatarUrl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/jira-control/avatar/avatar.stories.ts",
                    "type": "string",
                    "defaultValue": "'https://res.cloudinary.com/dvujyxh7e/image/upload/c_scale,w_128/v1593253478/trung-vo_bioxmc.png'"
                },
                {
                    "name": "Rounded",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/jira-control/avatar/avatar.stories.ts",
                    "type": "Story<AvatarComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Square",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/jira-control/avatar/avatar.stories.ts",
                    "type": "Story<AvatarComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/jira-control/avatar/avatar.stories.ts",
                    "type": "Story<AvatarComponent>",
                    "defaultValue": "(args: AvatarComponent) => ({\n  component: AvatarComponent,\n  props: args\n})"
                }
            ],
            "src/app/core/directives/autofocus.directive.ts": [
                {
                    "name": "BASE_TIMER_DELAY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/directives/autofocus.directive.ts",
                    "type": "number",
                    "defaultValue": "10"
                }
            ],
            "src/app/project/components/board/index.ts": [
                {
                    "name": "BoardPageComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/project/components/board/index.ts",
                    "type": "[]",
                    "defaultValue": "[BoardDndComponent, BoardDndListComponent, BoardFilterComponent]"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/app/jira-control/breadcrumbs/breadcrumbs.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/jira-control/breadcrumbs/breadcrumbs.stories.ts",
                    "type": "Story<BreadcrumbsComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/jira-control/breadcrumbs/breadcrumbs.stories.ts",
                    "type": "Story<BreadcrumbsComponent>",
                    "defaultValue": "(args: BreadcrumbsComponent) => ({\n  component: BreadcrumbsComponent,\n  props: args\n})"
                }
            ],
            "src/app/jira-control/button/button.stories.ts": [
                {
                    "name": "Empty",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/jira-control/button/button.stories.ts",
                    "type": "Story<ButtonProps>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/jira-control/button/button.stories.ts",
                    "type": "Story<ButtonProps>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/jira-control/button/button.stories.ts",
                    "type": "Story<ButtonProps>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/jira-control/button/button.stories.ts",
                    "type": "Story<ButtonComponent>",
                    "defaultValue": "({ label, className }: Partial<ButtonProps>) => ({\n  component: ButtonComponent,\n  moduleMetadata: {\n    declarations: [ButtonComponent], // Removed if no template\n    imports: []\n  },\n  template: `<j-button className='${className}'>${label}</j-button>`\n})"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "EnvironmentModel",
                    "defaultValue": "{\n  production: true,\n  apiUrl: '/assets/data' // 'https://jira-clone-angular-api.herokuapp.com'\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "EnvironmentModel",
                    "defaultValue": "{\n  production: false,\n  apiUrl: '/assets/data' // 'http://localhost:3000'\n}"
                }
            ],
            "src/app/jira-control/input/input.stories.ts": [
                {
                    "name": "Flat",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/jira-control/input/input.stories.ts",
                    "type": "Story<InputComponent>",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/jira-control/input/input.stories.ts",
                    "type": "Story<InputComponent>",
                    "defaultValue": "(args: InputComponent) => ({\n  component: InputComponent,\n  props: args\n})"
                }
            ],
            "src/app/core/services/google-analytics.service.ts": [
                {
                    "name": "GOOGLE_ANALYTICS_ID",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/services/google-analytics.service.ts",
                    "type": "string",
                    "defaultValue": "'UA-80363801-4'"
                },
                {
                    "name": "gtag",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/services/google-analytics.service.ts",
                    "type": "any"
                }
            ],
            "src/main.ts": [
                {
                    "name": "initSentry",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/main.ts",
                    "type": "",
                    "defaultValue": "() => {\n  Sentry.init({\n    dsn: 'https://b2af8332e38f486d910f06b79df66365@o495789.ingest.sentry.io/5569161',\n    autoSessionTracking: true,\n    integrations: [\n      new Integrations.BrowserTracing({\n        tracingOrigins: ['localhost', 'https://jira.trungk18.com/'],\n        routingInstrumentation: Sentry.routingInstrumentation\n      })\n    ],\n\n    tracesSampleRate: 1.0\n  });\n}"
                }
            ],
            "src/app/interface/issue.ts": [
                {
                    "name": "IssuePriorityColors",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/interface/issue.ts",
                    "type": "object",
                    "defaultValue": "{\n  [IssuePriority.HIGHEST]: '#CD1317',\n  [IssuePriority.HIGH]: '#E9494A',\n  [IssuePriority.MEDIUM]: '#E97F33',\n  [IssuePriority.LOW]: '#2D8738',\n  [IssuePriority.LOWEST]: '#57A55A'\n}"
                },
                {
                    "name": "IssueStatusDisplay",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/interface/issue.ts",
                    "type": "object",
                    "defaultValue": "{\n  [IssueStatus.BACKLOG]: 'Backlog',\n  [IssueStatus.SELECTED]: 'Selected for Development',\n  [IssueStatus.IN_PROGRESS]: 'In progress',\n  [IssueStatus.DONE]: 'Done'\n}"
                }
            ],
            "src/app/project/components/issues/index.ts": [
                {
                    "name": "IssueUtilComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/project/components/issues/index.ts",
                    "type": "[]",
                    "defaultValue": "[\n  IssueCardComponent,\n  IssueLoaderComponent,\n  IssueModalComponent,\n  IssueDetailComponent,\n  IssueTitleComponent,\n  IssueDescriptionComponent,\n  IssueTypeComponent,\n  IssuePriorityComponent,\n  IssueAssigneesComponent,\n  IssueReporterComponent,\n  IssueStatusComponent,\n  IssueCommentsComponent,\n  IssueCommentComponent,\n  IssueDeleteModalComponent\n]"
                }
            ],
            "src/app/jira-control/jira-control.module.ts": [
                {
                    "name": "JiraControlComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/jira-control/jira-control.module.ts",
                    "type": "[]",
                    "defaultValue": "[\n  SvgDefinitionsComponent,\n  SvgIconComponent,\n  BreadcrumbsComponent,\n  ButtonComponent,\n  InputComponent,\n  AvatarComponent\n]"
                }
            ],
            "src/app/project/components/navigation/index.ts": [
                {
                    "name": "NavigationComponents",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/project/components/navigation/index.ts",
                    "type": "[]",
                    "defaultValue": "[SidebarComponent, NavbarLeftComponent, NavigationComponent]"
                }
            ],
            "src/app/project/config/icons.ts": [
                {
                    "name": "NZ_JIRA_ICONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/project/config/icons.ts",
                    "type": "IconDefinition[]",
                    "defaultValue": "[\n  QuestionCircleFill,\n  PlusOutline,\n  SearchOutline,\n  CloseOutline,\n  TwitterOutline,\n  EditOutline\n]"
                }
            ],
            "src/app/project/config/editor.ts": [
                {
                    "name": "quillConfiguration",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/project/config/editor.ts",
                    "type": "object",
                    "defaultValue": "{\n  toolbar: [\n    ['bold', 'italic', 'underline', 'strike'],\n    ['blockquote', 'code-block'],\n    [{ list: 'ordered' }, { list: 'bullet' }],\n    [{ header: [1, 2, 3, 4, 5, 6, false] }],\n    [{ color: [] }, { background: [] }],\n    ['link'],\n    ['clean']\n  ]\n}"
                }
            ],
            "src/app/project/config/sidebar.ts": [
                {
                    "name": "SideBarLinks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/project/config/sidebar.ts",
                    "type": "[]",
                    "defaultValue": "[\n  new SideBarLink('Kanban Board', 'board', 'board'),\n  new SideBarLink('Project Settings', 'cog', 'settings'),\n  new SideBarLink('Releases', 'ship'),\n  new SideBarLink('Issues and filters', 'filters'),\n  new SideBarLink('Pages', 'page'),\n  new SideBarLink('Reports', 'report'),\n  new SideBarLink('Components', 'component')\n]"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/project/auth/auth.store.ts": [
                {
                    "name": "createInitialAuthState",
                    "file": "src/app/project/auth/auth.store.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [],
                    "returnType": "AuthState"
                }
            ],
            "src/app/project/state/filter/filter.store.ts": [
                {
                    "name": "createInitialFilterState",
                    "file": "src/app/project/state/filter/filter.store.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [],
                    "returnType": "FilterState"
                }
            ],
            "src/app/project/state/project/project.store.ts": [
                {
                    "name": "createInitialState",
                    "file": "src/app/project/state/project/project.store.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [],
                    "returnType": "ProjectState"
                }
            ],
            "src/app/core/validators/no-whitespace.validator.ts": [
                {
                    "name": "NoWhitespaceValidator",
                    "file": "src/app/core/validators/no-whitespace.validator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [],
                    "returnType": "ValidatorFn"
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/interface/issue.ts": [
                {
                    "name": "IssuePriority",
                    "childs": [
                        {
                            "name": "LOWEST",
                            "value": "Lowest"
                        },
                        {
                            "name": "LOW",
                            "value": "Low"
                        },
                        {
                            "name": "MEDIUM",
                            "value": "Medium"
                        },
                        {
                            "name": "HIGH",
                            "value": "High"
                        },
                        {
                            "name": "HIGHEST",
                            "value": "Highest"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/interface/issue.ts"
                },
                {
                    "name": "IssueStatus",
                    "childs": [
                        {
                            "name": "BACKLOG",
                            "value": "Backlog"
                        },
                        {
                            "name": "SELECTED",
                            "value": "Selected"
                        },
                        {
                            "name": "IN_PROGRESS",
                            "value": "InProgress"
                        },
                        {
                            "name": "DONE",
                            "value": "Done"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/interface/issue.ts"
                },
                {
                    "name": "IssueType",
                    "childs": [
                        {
                            "name": "STORY",
                            "value": "Story"
                        },
                        {
                            "name": "TASK",
                            "value": "Task"
                        },
                        {
                            "name": "BUG",
                            "value": "Bug"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/interface/issue.ts"
                }
            ],
            "src/app/interface/project.ts": [
                {
                    "name": "ProjectCategory",
                    "childs": [
                        {
                            "name": "SOFTWARE",
                            "value": "Software"
                        },
                        {
                            "name": "MARKETING",
                            "value": "Marketing"
                        },
                        {
                            "name": "BUSINESS",
                            "value": "Business"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/interface/project.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/project/components/navigation/navbar-left/navbar-left.component.ts": [
                {
                    "name": "Handler",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "src/app/project/components/navigation/navbar-left/navbar-left.component.ts",
                    "description": "",
                    "kind": 162
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/directives/autofocus.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AutofocusDirective",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/core/directives/autofocus.directive.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BASE_TIMER_DELAY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/google-analytics.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GoogleAnalyticsService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/google-analytics.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GOOGLE_ANALYTICS_ID",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/google-analytics.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "gtag",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/snow/snow.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SnowComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/validators/no-whitespace.validator.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "NoWhitespaceValidator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/interface/comment.ts",
                "type": "class",
                "linktype": "classe",
                "name": "JComment",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/interface/issue-priority-icon.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IssuePriorityIcon",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/interface/issue-type-icon.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IssueTypeWithIcon",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/interface/issue.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "JIssue",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/interface/issue.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IssuePriorityColors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/interface/issue.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IssueStatusDisplay",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/interface/project.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "JProject",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/interface/ui-model/delete-issue-model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteIssueModel",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/interface/ui-model/nav-link.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SideBarLink",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/interface/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "JUser",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/jira-control/avatar/avatar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AvatarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/jira-control/avatar/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "avatarUrl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/jira-control/avatar/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Rounded",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/jira-control/avatar/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Square",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/jira-control/avatar/avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/jira-control/breadcrumbs/breadcrumbs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BreadcrumbsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/jira-control/breadcrumbs/breadcrumbs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/jira-control/breadcrumbs/breadcrumbs.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/jira-control/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/jira-control/button/button.stories.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ButtonProps",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/jira-control/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Empty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/jira-control/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/jira-control/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/jira-control/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/jira-control/input/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/jira-control/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Flat",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/jira-control/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/jira-control/jira-control.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "JiraControlComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/jira-control/svg-definitions/svg-definitions.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SvgDefinitionsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/jira-control/svg-icon/svg-icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SvgIconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/project/auth/auth.query.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthQuery",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/project/auth/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/project/auth/auth.store.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthStore",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/project/auth/auth.store.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/project/auth/auth.store.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "createInitialAuthState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/project/auth/loginPayload.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoginPayload",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/project/components/add-issue-modal/add-issue-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddIssueModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/project/components/add-issue-modal/issue-assignees-select/issue-assignees-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IssueAssigneesSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/project/components/add-issue-modal/issue-priority-select/issue-priority-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IssuePrioritySelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/project/components/add-issue-modal/issue-reporter-select/issue-reporter-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IssueReporterSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/project/components/add-issue-modal/issue-type-select/issue-type-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IssueTypeSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/project/components/board/board-dnd-list/board-dnd-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BoardDndListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/project/components/board/board-dnd/board-dnd.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BoardDndComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/project/components/board/board-filter/board-filter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BoardFilterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/project/components/board/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BoardPageComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/project/components/issues/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IssueUtilComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/project/components/issues/issue-assignees/issue-assignees.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IssueAssigneesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/project/components/issues/issue-card/issue-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IssueCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/project/components/issues/issue-comment/issue-comment.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IssueCommentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/project/components/issues/issue-comments/issue-comments.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IssueCommentsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/project/components/issues/issue-delete-modal/issue-delete-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IssueDeleteModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/project/components/issues/issue-description/issue-description.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IssueDescriptionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/project/components/issues/issue-detail/issue-detail.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IssueDetailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/project/components/issues/issue-loader/issue-loader.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IssueLoaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/project/components/issues/issue-modal/issue-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IssueModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/project/components/issues/issue-priority/issue-priority.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IssuePriorityComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/project/components/issues/issue-reporter/issue-reporter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IssueReporterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/project/components/issues/issue-status/issue-status.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IssueStatusComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/project/components/issues/issue-status/issue-status.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IssueStatusValueTitle",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/project/components/issues/issue-title/issue-title.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IssueTitleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/project/components/issues/issue-type/issue-type.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IssueTypeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/project/components/navigation/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NavigationComponents",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/project/components/navigation/navbar-left/navbar-left.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavbarLeftComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/project/components/navigation/navbar-left/navbar-left.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "NavItem",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/project/components/navigation/navigation/navigation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavigationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/project/components/navigation/resizer/resizer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ResizerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/project/components/navigation/sidebar/sidebar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidebarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/project/components/search/issue-result/issue-result.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IssueResultComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/project/components/search/search-drawer/search-drawer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SearchDrawerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/project/components/user/user.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/project/config/const.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProjectConst",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/project/config/editor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "quillConfiguration",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/project/config/icons.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NZ_JIRA_ICONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/project/config/sidebar.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SideBarLinks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/project/pages/board/board.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BoardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/project/pages/full-issue-detail/full-issue-detail.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FullIssueDetailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/project/pages/settings/settings.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SettingsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/project/project.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProjectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/project/project.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "ProjectGuard",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/project/state/filter/filter.query.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FilterQuery",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/project/state/filter/filter.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FilterService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/project/state/filter/filter.store.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FilterStore",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/project/state/filter/filter.store.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FilterState",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/project/state/filter/filter.store.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "createInitialFilterState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/project/state/project/project.query.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProjectQuery",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/project/state/project/project.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProjectService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/project/state/project/project.store.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProjectStore",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/project/state/project/project.store.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProjectState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/project/state/project/project.store.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "createInitialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/project/utils/date.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DateUtil",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/project/utils/issue.ts",
                "type": "class",
                "linktype": "classe",
                "name": "IssueUtil",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/work-in-progress/work-in-progress.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WorkInProgressComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment-model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "EnvironmentModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/main.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initSentry",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}